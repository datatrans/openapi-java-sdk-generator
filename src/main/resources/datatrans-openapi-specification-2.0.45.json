{
  "openapi": "3.0.1",
  "info": {
    "title": "Datatrans API Reference",
    "description": "Welcome to the Datatrans API reference.\nThis document is meant to be used in combination with https://docs.datatrans.ch.\nAll the parameters used in the curl and web samples are described here.\nReach out to support@datatrans.ch if something is missing or unclear.\n\nLast updated: 10.07.24 - 12:13 UTC\n\n# Payment Process\nThe following steps describe how transactions are processed with Datatrans.\nWe separate payments in three categories: Customer-initiated payments, merchant-initiated payments and after the payment.\n\n## Customer Initiated Payments\nWe have three integrations available: [Redirect](https://docs.datatrans.ch/docs/redirect-lightbox),\n[Lightbox](https://docs.datatrans.ch/docs/redirect-lightbox) and [Secure Fields](https://docs.datatrans.ch/docs/secure-fields).\n\n### Redirect & Lightbox\n- Send the required parameters to initialize a `transactionId` to the [init](#operation/init) endpoint.\n- Let the customer proceed with the payment by redirecting them to the correct link - or showing them your payment form.\n  - Redirect: Redirect the browser to the following URL structure\n    ```\n    https://pay.sandbox.datatrans.com/v1/start/transactionId\n    ```\n  - Lightbox: Load the JavaScript library and initialize the payment form:\n    ```js\n    <script src=\"https://pay.sandbox.datatrans.com/upp/payment/js/datatrans-2.0.0.js\">\n    ```\n    ```js\n    payButton.onclick = function() {\n      Datatrans.startPayment({\n        transactionId:  \"transactionId\"\n      });\n    };\n    ```\n- Your customer proceeds with entering their payment information and finally hits the pay or continue button.\n- For card payments, we check the payment information with your acquirers. The acquirers check the payment information with the issuing parties.\nThe customer proceeds with 3D Secure whenever required.\n- Once the transaction is completed, we return all relevant information\nto you (check our [Webhook section](#section/Webhook) for more details).\nThe browser will be redirected to the success, cancel or error URL with our `datatransTrxId` in the response.\n\n### Secure Fields\n- Send the required parameters to initialize a transactionId to our [secureFieldsInit](#operation/secureFieldsInit) endpoint.\n- Load the Secure Fields JavaScript libarary and initialize Secure Fields:\n  ```js\n  <script src=\"https://pay.sandbox.datatrans.com/upp/payment/js/secure-fields-2.0.0.js\">\n  ```\n  ```js\n  var secureFields = new SecureFields();\n  secureFields.init(\n    {{transactionId}}, {\n        cardNumber: \"cardNumberPlaceholder\",\n        cvv: \"cvvPlaceholder\",\n    });\n  ```\n- Handle the success event of the secureFields.submit() call.\n- If 3D authentication is required for a specific transaction, the `redirect` property inside the `data`\nobject will indicate the URL that the customer needs to be redirected to.\n- Use the [Authorize an authenticated transaction](#operation/authorize-split)endpoint to fully authorize\nthe Secure Fields transaction. This is required to finalize the authorization process with Secure Fields.\n\n## Merchant Initiated Payments\nOnce you have processed a customer-initiated payment or registration you can call our API to process\nrecurring payments. Check our [authorize](#operation/authorize) endpoint to see how to create a recurring\npayment or our [validate](#operation/validate) endpoint to validate your customers’ saved payment details.\n\n## After the payment\nUse the `transactionId` to check the [status](#operation/status) and to [settle](#operation/settle),\n[cancel](#operation/cancel) or [refund](#operation/credit) a transaction.\n\n# Idempotency\n\nTo retry identical requests with the same effect without accidentally performing the same operation more than needed,\nyou can add the header `Idempotency-Key` to your requests. This is useful when API calls are disrupted or you did not\nreceive a response. In other words, retrying identical requests with our idempotency key will not have any side effects.\nWe will return the same response for any identical request that includes the same idempotency key.\n\nIf your request failed to reach our servers, no idempotent result is saved because no API endpoint processed your request.\nIn such cases, you can simply retry your operation safely. Idempotency keys remain stored for 60 minutes. After 60 minutes\nhave passed, sending the same request together with the previous idempotency key will create a new operation.\n\nPlease note that the idempotency key has to be unique for each request and has to be defined by yourself. We recommend\nassigning a random value as your idempotency key and using UUID v4. Idempotency is only available for `POST` requests.\n\nIdempotency was implemented according to the [\"The Idempotency HTTP Header Field\" Internet-Draft](https://datatracker.ietf.org/doc/draft-ietf-httpapi-idempotency-key-header/)\n\n|Scenario|Condition|Expectation|\n|:---|:---|:---|\n|First time request|Idempotency key has not been seen during the past 60 minutes.|The request is processed normally.|\n|Repeated request|The request was retried after the first time request completed.| The response from the first time request will be returned.|\n|Repeated request|The request was retried before the first time request completed.| 409 Conflict. It is recommended that clients time their retries using an exponential backoff algorithm.|\n|Repeated request|The request body is different than the one from the first time request.| 422 Unprocessable Entity.|\n\nExample:\n```sh\ncurl -i 'https://api.sandbox.datatrans.com/v1/transactions' \\\n    -H 'Authorization: Basic MTEwMDAwNzI4MzpobDJST1NScUN2am5EVlJL' \\\n    -H 'Content-Type: application/json; charset=UTF-8' \\\n    -H 'Idempotency-Key: e75d621b-0e56-4b71-b889-1acec3e9d870' \\\n    -d '{\n    \"refno\" : \"58b389331dad\",\n    \"amount\" : 1000,\n    \"currency\" : \"CHF\",\n    \"paymentMethods\" : [ \"VIS\", \"ECA\", \"PAP\" ],\n    \"option\" : {\n       \"createAlias\" : true\n    }\n}'\n```\n\n# Authentication\nAuthentication to the APIs is performed with HTTP basic authentication. Your\n`merchantId` acts as the username. To get the password, login\nto the <a href='https://admin.sandbox.datatrans.com/' target='_blank'>dashboard</a>\nand navigate to the security settings under `UPP Administration > Security`.\n\nCreate a base64 encoded value consisting of merchantId and password (most HTTP clients\nare able to handle the base64 encoding automatically) and submit the Authorization header with your requests. Here’s an example:\n\n```\nbase64(merchantId:password) = MTAwMDAxMTAxMTpYMWVXNmkjJA==\n```\n\n```\nAuthorization: Basic MTAwMDAxMTAxMTpYMWVXNmkjJA==\n````\n\nAll API requests must be done over HTTPS with TLS >= 1.2.\n\n# Errors\nDatatrans uses HTTP response codes to indicate if an API call was successful or resulted in a failure.\nHTTP `2xx` status codes indicate a successful API call whereas HTTP `4xx` status codes\nindicate client errors or if something with the transaction went wrong - for example a decline.\nIn rare cases HTTP `5xx` status codes are returned. Those indicate errors on Datatrans side.\n\nHere’s the payload of a sample HTTP `400` error, showing that your request has wrong values in it\n```\n{\n  \"error\" : {\n    \"code\" : \"INVALID_PROPERTY\",\n    \"message\" : \"init.initRequest.currency The given currency does not have the right format\"\n  }\n}\n```\n\n# Webhook\nAfter each authorization Datatrans tries to call the configured Webhook (POST) URL. The Webhook URL\ncan be configured within the <a href='https://admin.sandbox.datatrans.com/' target='_blank'>dashboard</a>.\nIt is also possible to overwrite the configured webhook URL with the `init.webhook` property.\nThe Webhook payload contains the same information as the response of a [Status API](#operation/status) call.\n\n## Webhook signing\nIf you want your webhook requests to be signed, setup a HMAC key in your merchant configuration.\nTo get your HMAC key, login to our dashboard and navigate to the Security settings in your\nmerchant configuration to view your server to server security settings.\nSelect the radio button `Important parameters will be digitally signed (HMAC-SHA256) and sent with payment messages`.\nDatatrans will use this key to sign the webhook payload and will add a `Datatrans-Signature` HTTP request header:\n\n```sh\nDatatrans-Signature: t=1559303131511,s0=33819a1220fd8e38fc5bad3f57ef31095fac0deb38c001ba347e694f48ffe2fc\n```\n\nOn your server, calculate the signature of the webhook payload and finally compare it to `s0`.\n`timestamp` is the `t` value from the Datatrans-Signature header, `payload` represents all UTF-8 bytes\nfrom the body of the payload and finally `key` is the HMAC key you configured within the dashboard.\nIf the value of `sign` is equal to `s0` from the `Datatrans-Signature` header,\nthe webhook payload is valid and was not tampered.\n\n**Java**\n\n```java\n// hex bytes of the key\n\n// if Java version < 17, a 3rd-party library like apache-commons can be used\nbyte[] key = Hex.decodeHex(key);\n\n// if Java version >= 17, the built in HexFormat class can be used\nbyte[] key = HexFormat.of().parseHex(key);\n\n// Create sign with timestamp and payload\nString algorithm = \"HmacSha256\";\nSecretKeySpec macKey = new SecretKeySpec(key, algorithm);\nMac mac = Mac.getInstance(algorithm);\nmac.init(macKey);\nmac.update(String.valueOf(timestamp).getBytes());\nbyte[] result = mac.doFinal(payload.getBytes());\nString sign = Hex.encodeHexString(result);\n```\n\n**Python**\n\n```python\n# hex bytes of the key\nkey_hex_bytes = bytes.fromhex(key)\n\n# Create sign with timestamp and payload\nsign = hmac.new(key_hex_bytes, bytes(str(timestamp) + payload, 'utf-8'), hashlib.sha256)\n```\n\n# Release notes\n<details>\n  <summary>Details</summary>\n\n  ### 2.0.45 - 02.07.2024\n- improved documentation of 3D params\n- update underlying JSON library\n- minor fixes\n\n### 2.0.44 - 16.05.2024\n- added `card.type` feature to the INIT API (same as for the AUTHORIZE API)\n- added support for plain GooglePay and ApplePay device tokens (INIT and AUTHORIZE API)\n- fixed the provided openapi specification (there were issues when creating a client from it)\n- added interim support for GiroPay 2.0 \n\n### 2.0.43 - 18.04.2024\n- added `DEVICE_TOKEN` as possible card type in the Authorize API\n- added the card type behavior to the Init API\n\n### 2.0.42 - 13.02.2024\n- added `paycard` to MFA/MFX\n- added better support for Amex Network Tokenization\n- multiple fixes related to `PLU`\n- fixed idempotency behavior in case of a response with status 500\n- fixed 3D enrollment for CBL cards in Init API\n\n### 2.0.41 - 17.01.2024\n- added `cardholder` to alias patch request\n- added `fingerprint` implementation for TWI\n- added `option.storeCustomerData` to the authorize API\n- added `MFG` to the `screen` API\n\n### 2.0.40 - 14.11.2023\n- added `avs` object to the status api\n- added `ELV` object to the status api\n  - `mandateId` and `iban` are returned if available\n- added secure fields init tokenize\n\n### 2.0.39 - 18.10.2023\n- added fingerprint support for Twint aliases\n- fixed broken link in idempotency chapter\n- adjusted java sign example\n\n### 2.0.38 - 04.10.2023\n- added support for `PLU`\n- added support for `CUV`\n- added `MFG` support for the authorize API\n- added `init.option.storeCustomerData`\n\n### 2.0.37 - 19.07.2023\n- added `MPX` paycard number to the status API\n- added `airlineData` to the Authorize Split API\n- added wallet indicator in Alias Status response\n- added Alipay+ support\n- added documentation for Twint+ parameters\n- added support for ferry reservations for Klarna\n- added 3D2.2 feature `3RI`\n- added support for `MPA` and `MPG`\n- fixed bug in MCP handling\n- fixed the handling of `authorize.card.3D.threeDSTransactionId`\n- fixed Klarna subtype documentation for the Status API\n\n### 2.0.36 - 16.03.2023\n- added `MBP` (MobilePay) payment method\n- added `uniqueRefno` handling to the `init` API\n  - if the unique refno feature is enabled the init does not accept duplicated refnos anymore. even if the redirect never happens.\n- added proper error mappings for various errors with code `UNKNOWN_ERROR`\n\n### 2.0.35 - 08.02.2023\n- added `VPS` (Vipps) payment method\n- added `SWP` to the authorize API\n- added `imageUrl` to the `article` property for `KLN`\n- fixed wrong validation for the `marketplace` property\n- added proper error mappings for various errors with code `UNKNOWN_ERROR`\n\n### 2.0.34 - 12.12.2022\n* added support for `accertify`\n* increase the maximum length of `refno` to 40 characters\n* refactor of `MCP` properties to support static MCP\n\n### 2.0.33 - 08.11.2022\n* fixed the openapi specification\n  * renamed the models\n  * removed illegal characters from the specification\n* added validation to some 3D properties\n\n### 2.0.32 - 12.10.2022\n* added different `card` types `PlainCard`, `AliasCard` and `NetworkTokenCard` for the `authorize` and `init` endpoint\n  * the old card type is still supported\n* fixed `webhook.url` for mobile flows\n* improved the API docs for `statusResponse.status`\n\n### 2.0.31 - 06.10.2022\n* update API docs for `status.language` in the status response\n\n### 2.0.30 - 23.09.2022\n* added `qrData` to `MPX` and `MFX` in the status API response\n* added support for `KLN` train reservations\n* added additional `airPlus` properties\n* added the `ELV` request properties to the API docs (init and authorize API)\n* fix `MCP` sample request/response examples in the api docs\n* fix date format issues for `airPlus` properties\n\n### 2.0.29 - 17.08.2022\n* added `merchantId` to the status API response\n* added `SWH` (Swish) payment method\n* added `messageExtensions` to `init.card.3d`\n* added `authorizeResponse.card` to the API docs\n* added `GFT` (MFG Gift Card) payment method\n* added `CBL` (Cartes Bancaires) payment method\n* added `HPC` (Hipercard) payment method\n* added `airPlus` to the init API request\n* added more languages to the `init.language` API docs\n* cleaned up `order.article` property\n* extended the init flow to work also with tokenization mode\n* improved the api docs for the `credit` api\n* no `card` object is returned in the `alias` info response if the content is empty\n* fix the status api now also returns the `externalCode` for `INT` transactions\n* fix enrollment check in `init` api if `init.number` is set with plain card number\n* fix handle `airlineData` date format issues\n\n### 2.0.28 - 23.05.2022\n* Added support to send a webhook URL along the init request. If set, it overwrites the POST URL configured in the dashboard.\n  * See `init.webhook` for more information.\n\n### 2.0.27 - 13.04.2022\n* Added MCP support (Multi Currency Processing)\n  * Added new `GET /v1/multicurrency/rates` API to fetch the MCP rates.\n  * Added `init.mcp` property\n  * Added `authorize.mcp` property\n  * Added `mcp` property in the `status` response if available for the transaction\n\n### 2.0.26 - 16.03.2022\n* Added the OpenAPI description for the `GET /v1/aliases/{alias}` response.\n\n### 2.0.25 - 02.03.2022\n* New API `/v1/transactions/{transactionId}/increase` to increase the amount for an authorized transaction (credit cards only).\n\n### 2.0.24 - 15.12.2021 🎄\n* Added full support for `invoiceOnDelivery` when using `MFX` or `MPX` as payment method.\n* The Status API now returns the ESR data for `MFX` and `MPX` when `invoiceOnDelivery=true` was used.\n\n### 2.0.23 - 20.10.2021\n* Added support for Klarna `KLN` hotel extended merchant data (EMD)\n\n### 2.0.22 - 21.07.2021\n* Added full support for Swisscom Pay `ESY`\n* The `marketplace` object now accepts an array of splits.\n\n### 2.0.21 - 21.05.2021\n* Updated idempotency handling. See the details here https://api-reference.datatrans.ch/#section/Idempotency\n\n### 2.0.20 - 18.05.2021\n* In addition to `debit` and `credit` the Status API now also returns `prepaid` in the `card.info.type` property.\n* paysafecard - Added support for `merchantClientId` \n\n### 2.0.19 - 03.05.2021\n* Fixed `PAP.orderTransactionId` to be a string\n* Added support for `PAP.fraudSessionId` (PayPal FraudNet)\n\n### 2.0.18 - 21.04.2021\n* Added new `POST /v1/transactions/screen` API to check a customer's credit score before sending an actual authorization request.\nCurrently only `INT` (Byjuno) is supported.\n\n### 2.0.17 - 20.04.2021\n* Added new `GET /v1/aliases` API to receive more information about a particular alias.\n\n### 2.0.16 - 13.04.2021\n* Added support for Migros Bank E-Pay <code>MDP</code>\n\n### 2.0.15 - 24.03.2021\n* Byjuno - renamed `subPaymentMethod` to `subtype` (`subPaymentMethod` still works)\n* Klarna - Returning the `subtype` (`pay_now`, `pay_later`, `pay_over_time`, `direct_debit`, `direct_bank_transfer`)\nfrom the Status API\n\n### 2.0.14 - 09.03.2021\n* Byjuno - Added support for `customData` and `firstRateAmount`\n* Returning the `transactionId` (if available) for a failed Refund API call.\n\n### 2.0.13 - 15.02.2021\n* The Status and Webhook payloads now include the `language` property\n* Fixed a bug where `card.3D.transStatusReason` and `card.3D.cardholderInfo` was not returned\n\n### 2.0.12 - 04.02.2021\n* Added support for PayPal transaction context (STC)\n* Fixed a bug where the transaction status did not switch to `failed` after it timed out\n* Fixed a bug with `option.rememberMe` not returning the Alias from the Status API\n\n### 2.0.11 - 01.02.2021\n* Returning `card.3D.transStatusReason` (if available) from the Status API\n\n### 2.0.10 - 18.01.2021\n* Returning `card.3D.cardholderInfo` (if available) from the Status API\n\n### 2.0.9 - 21.12.2020\n* Added support for Alipay <code>ALP</code>\n\n### 2.0.8 - 21.12.2020\n* Added full support for Klarna <code>KLN</code>\n* Added support for swissbilling <code>SWB</code>\n\n</details>\n",
    "contact": {
      "url": "https://docs.datatrans.ch",
      "email": "support@datatrans.ch"
    },
    "version": "2.0.45",
    "x-logo": {
      "url": "https://www.datatrans.ch/static/img/im-logo-desktop-black.32f10db274ee.svg",
      "backgroundColor": "#FAFAFA",
      "altText": "Datatrans logo"
    }
  },
  "servers": [
    {
      "url": "https://api.sandbox.datatrans.com",
      "description": "Datatrans Sandbox"
    }
  ],
  "tags": [
    {
      "name": "/v1/transactions"
    },
    {
      "name": "/v1/aliases",
      "description": "The aliases API gives you complete control over a Datatrans alias, be it a card number\nalias or an alias of a non-card payment method such as PayPal, Postfinance etc.\n\nNote that the operations of this API apply only to the most recent Datatrans alias format.\nPlease reach out to support@datatrans.ch if you are not sure which alias format you have in use.\n\n### Alias access\nBy default, only the merchant that created the alias has access to it. Contact us, if you have a use case\nwhere you need to share the alias.\n"
    },
    {
      "name": "/v1/reconciliations"
    },
    {
      "name": "/v1/multicurrency"
    }
  ],
  "paths": {
    "/v1/transactions": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Initialize a transaction",
        "description": "Securely send all the needed parameters to the transaction initialization API. The result of this API call is a `HTTP 201` status code with a `transactionId` in the response body and the `Location` header set. This call is required to proceed with our Redirect and Lightbox integration",
        "operationId": "init",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitRequest"
              },
              "examples": {
                "initRequest1": {
                  "summary": "Basic request with merchant URLs",
                  "description": "initRequest1",
                  "value": {
                    "currency": "CHF",
                    "refno": "0URlqRULK",
                    "amount": 1337,
                    "redirect": {
                      "successUrl": "https://pay.sandbox.datatrans.com/upp/merchant/successPage.jsp",
                      "cancelUrl": "https://pay.sandbox.datatrans.com/upp/merchant/cancelPage.jsp",
                      "errorUrl": "https://pay.sandbox.datatrans.com/upp/merchant/errorPage.jsp"
                    }
                  }
                },
                "initRequest2": {
                  "summary": "Request with all possible 3D Secure 2.0 parameters",
                  "description": "initRequest2",
                  "value": {
                    "currency": "CHF",
                    "refno": "6ywl9NkEL",
                    "card": {
                      "alias": "5100001000000022",
                      "aliasCVV": "123",
                      "expiryMonth": "06",
                      "expiryYear": "25",
                      "3D": {
                        "preferredProtocolVersion": "2.1.0",
                        "enforcePreferredProtocolVersion": false,
                        "deviceChannel": "02",
                        "messageCategory": "01",
                        "threeDSCompInd": "Y",
                        "threeDSRequestor": {
                          "threeDSRequestorAuthenticationInd": "02",
                          "threeDSRequestorAuthenticationInfo": {
                            "threeDSReqAuthMethod": "04",
                            "threeDSReqAuthTimestamp": "201812201735",
                            "threeDSReqAuthData": "threeDSReqAuthData"
                          },
                          "threeDSRequestorChallengeInd": "03",
                          "threeDSRequestorPriorAuthenticationInfo": {
                            "threeDSReqPriorRef": "VOGXpZvTlCmBUyPnnZfmsGDKqxRsRwPovkAE",
                            "threeDSReqPriorAuthMethod": "01",
                            "threeDSReqPriorAuthTimestamp": "201812201735",
                            "threeDSReqPriorAuthData": "threeDSReqPriorAuthData"
                          }
                        },
                        "threeDSServerTransID": "df4b3490-db44-4a88-9619-ab173ff76fbe",
                        "cardholderAccount": {
                          "acctType": "02",
                          "cardExpiryDate": "1812",
                          "acctInfo": {
                            "chAccDate": "20181220",
                            "chAccChangeInd": "03",
                            "chAccChange": "20181220",
                            "chAccPwChangeInd": "04",
                            "chAccPwChange": "20181220",
                            "shipAddressUsageInd": "03",
                            "shipAddressUsage": "20181220",
                            "txnActivityDay": 1,
                            "txnActivityYear": 1,
                            "provisionAttemptsDay": 1,
                            "nbPurchaseAccount": 1,
                            "suspiciousAccActivity": "01",
                            "shipNameIndicator": "01",
                            "paymentAccInd": "03",
                            "paymentAccAge": "20181220"
                          },
                          "acctNumber": "1111111111111111",
                          "schemeId": "Visa",
                          "acctID": "acct-Id",
                          "payTokenInd": true
                        },
                        "cardholder": {
                          "addrMatch": "N",
                          "billAddrCity": "billAddrCity",
                          "billAddrCountry": "222",
                          "billAddrLine1": "billAddrLine1",
                          "billAddrLine2": "billAddrLine2",
                          "billAddrLine3": "billAddrLine3",
                          "billAddrPostCode": "billAddrPostCode",
                          "billAddrState": "111",
                          "email": "aaa-bbb@example.com",
                          "homePhone": {
                            "cc": "11",
                            "subscriber": "111111111111"
                          },
                          "mobilePhone": {
                            "cc": "11",
                            "subscriber": "111111111111"
                          },
                          "workPhone": {
                            "cc": "11",
                            "subscriber": "111111111111"
                          },
                          "cardholderName": "cardholderName",
                          "shipAddrCity": "shipAddrCity",
                          "shipAddrCountry": "111",
                          "shipAddrLine1": "shipAddrLine1",
                          "shipAddrLine2": "shipAddrLine2",
                          "shipAddrLine3": "shipAddrLine3",
                          "shipAddrPostCode": "shipAddrPostCode",
                          "shipAddrState": "222"
                        },
                        "relaxRegionalValidationRules": false,
                        "purchase": {
                          "purchaseInstalData": 3,
                          "merchantRiskIndicator": {
                            "shipIndicator": "01",
                            "deliveryTimeframe": "02",
                            "deliveryEmailAddress": "a-b@example.com",
                            "reorderItemsInd": "01",
                            "preOrderPurchaseInd": "01",
                            "preOrderDate": "20181220",
                            "giftCardAmount": 2,
                            "giftCardCurr": "111",
                            "giftCardCount": "1"
                          },
                          "purchaseAmount": 1,
                          "purchaseCurrency": "111",
                          "purchaseExponent": 1,
                          "purchaseDate": "20181220173550",
                          "recurringExpiry": "20181220",
                          "recurringFrequency": 1,
                          "transType": "01"
                        },
                        "acquirer": {
                          "acquirerBin": "acq-bin",
                          "acquirerMerchantId": "acq-mer-id"
                        },
                        "merchant": {
                          "mcc": "code",
                          "merchantCountryCode": "333",
                          "merchantName": "name"
                        },
                        "broadInfo": {
                          "message": "TLS 1.x will be turned off starting summer 2019 "
                        },
                        "deviceRenderOptions": {
                          "sdkInterface": "01",
                          "sdkUiType": [
                            "02"
                          ]
                        },
                        "messageExtension": [
                          {
                            "id": "id",
                            "name": "name",
                            "criticalityIndicator": false,
                            "data": {
                              "valueOne": "value1",
                              "valueTwo": "value2"
                            }
                          }
                        ],
                        "browserInformation": {
                          "browserAcceptHeader": "brw-accept-header",
                          "browserIP": "brw-ip",
                          "browserJavaEnabled": true,
                          "browserLanguage": "brw-lang",
                          "browserColorDepth": "8",
                          "browserScreenHeight": 1,
                          "browserScreenWidth": 1,
                          "browserTZ": 1,
                          "browserUserAgent": "brw-user",
                          "challengeWindowSize": "01"
                        },
                        "threeRIInd": "02"
                      }
                    },
                    "amount": 1234,
                    "language": "en",
                    "paymentMethods": [],
                    "redirect": {
                      "successUrl": "https://pay.sandbox.datatrans.com/upp/merchant/successPage.jsp",
                      "cancelUrl": "https://pay.sandbox.datatrans.com/upp/merchant/cancelPage.jsp",
                      "errorUrl": "https://pay.sandbox.datatrans.com/upp/merchant/errorPage.jsp",
                      "method": "GET"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Transaction successfully initialized",
            "headers": {
              "Location": {
                "description": "A URL where the users browser needs to be redirect to complete the payment. This redirect is only needed when using Redirect Mode. For Lightbox Mode the returned `transactionId` can be used to start the payment page.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitResponse"
                },
                "examples": {
                  "initResponse": {
                    "description": "initResponse",
                    "value": {
                      "transactionId": "240710141413978198"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "initErrorResponse": {
                    "description": "initErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_PROPERTY",
                        "message": "init.refno must not be null"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"currency\": \"CHF\",\n    \"refno\": \"0URlqRULK\",\n    \"amount\": 1337,\n    \"redirect\": {\n        \"successUrl\": \"https://pay.sandbox.datatrans.com/upp/merchant/successPage.jsp\",\n        \"cancelUrl\": \"https://pay.sandbox.datatrans.com/upp/merchant/cancelPage.jsp\",\n        \"errorUrl\": \"https://pay.sandbox.datatrans.com/upp/merchant/errorPage.jsp\"\n    }\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/secureFields": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Initialize a Secure Fields transaction",
        "description": "Proceed with the steps below to process [Secure Fields payment transactions](https://docs.datatrans.ch/docs/integrations-secure-fields):\n\n- Call the /v1/transactions/secureFields endpoint to retrieve a `transactionId`. The success result of this API call is a `HTTP 201` status code with a `transactionId` in the response body.\n- Initialize the `SecureFields` JavaScript library with the returned `transactionId`:\n```js\nvar secureFields = new SecureFields();\nsecureFields.init(\n    transactionId, {\n        cardNumber: \"cardNumberPlaceholder\",\n        cvv: \"cvvPlaceholder\",\n    });\n```\n- Handle the `success` event of the `secureFields.submit()` call. Example `success` event data:\n```json\n{\n    \"event\":\"success\",\n    \"data\": {\n        \"transactionId\":\"{transactionId}\",\n        \"cardInfo\":{\"brand\":\"MASTERCARD\",\"type\":\"credit\",\"usage\":\"consumer\",\"country\":\"CH\",\"issuer\":\"DATATRANS\"},\n        \"redirect\":\"https://pay.sandbox.datatrans.com/upp/v1/3D2/{transactionId}\"\n    }\n}\n```\n- If 3D authentication is required, the `redirect` property will indicate the URL that the browser needs to be redirected to.\n- Use the [Authorize an authenticated transaction](#operation/authorize-split) endpoint to authorize the Secure Fields transaction. This is required to finalize the authorization process with Secure Fields.\n- Use the `transactionId` to check the [status](#operation/status) and to [settle](#operation/settle), [cancel](#operation/cancel) or [credit (refund)](#operation/refund) an transaction.",
        "operationId": "secureFieldsInit",
        "parameters": [
          {
            "name": "client-name",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "ANDROID_SDK",
                "IOS_SDK",
                "LINK"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultSecureFieldsInitRequest"
              },
              "examples": {
                "secureFieldsInitRequest1": {
                  "summary": "Basic request",
                  "description": "secureFieldsInitRequest1",
                  "value": {
                    "amount": 100,
                    "currency": "CHF",
                    "returnUrl": "http://example.org/return"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Transaction successfully initialized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureFieldsInitResponse"
                },
                "examples": {
                  "secureFieldsInitResponse": {
                    "description": "secureFieldsInitResponse",
                    "value": {
                      "transactionId": "240710141414198216"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "secureFieldsInitErrorResponse": {
                    "description": "secureFieldsInitErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_PROPERTY",
                        "message": "init.amount must be > 0"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/secureFields \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"amount\": 100,\n    \"currency\": \"CHF\",\n    \"returnUrl\": \"http://example.org/return\"\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/authorize": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Authorize a transaction",
        "description": "To create a transaction without user interaction, send all required parameters to our authorize endpoint. This is the API call for merchant-initiated transactions with an existing `alias`. Depending on the payment method, additional parameters will be required. Refer to the payment method specific objects (for example `PAP`) to see which parameters are required additionally send. For credit cards, the `card` object has to be used",
        "operationId": "authorize",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizeRequest"
              },
              "examples": {
                "authorizeRequest1": {
                  "summary": "Basic authorization request",
                  "description": "authorizeRequest1",
                  "value": {
                    "currency": "CHF",
                    "refno": "z4XSyqjBp",
                    "card": {
                      "alias": "AAABcH0Bq92s3kgAESIAAbGj5NIsAHWC",
                      "expiryMonth": "06",
                      "expiryYear": "25"
                    },
                    "amount": 1000
                  }
                },
                "authorizeRequest2": {
                  "summary": "Authorization request with a PayPal alias",
                  "description": "authorizeRequest2",
                  "value": {
                    "currency": "CHF",
                    "refno": "yl0Ed1io9",
                    "PAP": {
                      "alias": "AAABdN5Y3Oys3kgAESIAAQLd6WXqaoRe"
                    },
                    "amount": 1000
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction successfully authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeResponse"
                },
                "examples": {
                  "authorizeResponse": {
                    "description": "authorizeResponse",
                    "value": {
                      "transactionId": "240710141424078373",
                      "acquirerAuthorizationCode": "141424",
                      "card": {
                        "masked": "424242xxxxxx4242"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "authorizeErrorResponse": {
                    "description": "authorizeErrorResponse",
                    "value": {
                      "transactionId": "240710141424368378",
                      "error": {
                        "code": "INVALID_PROPERTY",
                        "message": "authorize.currency"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/authorize \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"currency\": \"CHF\",\n    \"refno\": \"z4XSyqjBp\",\n    \"card\": {\n        \"alias\": \"AAABcH0Bq92s3kgAESIAAbGj5NIsAHWC\",\n        \"expiryMonth\": \"06\",\n        \"expiryYear\": \"25\"\n    },\n    \"amount\": 1000\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/{transactionId}/authorize": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Authorize an authenticated transaction",
        "description": "Use this API endpoint to fully authorize an already authenticated transaction. This call is required for any transaction done with our Secure Fields or if during the initialization of a transaction the parameter `option.authenticationOnly` was set to `true`",
        "operationId": "authorize-split",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The `transactionId` received after authentication was done.",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizeSplitRequest"
              },
              "examples": {
                "autorizeSplitRequest1": {
                  "summary": "Basic split authorization request",
                  "description": "autorizeSplitRequest1",
                  "value": {
                    "amount": 1000,
                    "refno": "vNM88zfrK"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction successfully authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeSplitResponse"
                },
                "examples": {
                  "authorizeSplitResponse": {
                    "description": "authorizeSplitResponse",
                    "value": {
                      "acquirerAuthorizationCode": "141423"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "authorizeSplitErrorResponse": {
                    "description": "authorizeSplitErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_TRANSACTION_STATUS",
                        "message": "already authorized"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/240710141419868299/authorize \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"amount\": 1000,\n    \"refno\": \"vNM88zfrK\"\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/validate": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Validate an existing alias",
        "description": "An existing alias can be validated at any time with the transaction validate API. No amount will be blocked on the customers account. Only credit cards (including Apple Pay and Google Pay), `PFC`, `KLN` and `PAP` support validation of an existing alias.",
        "operationId": "validate",
        "requestBody": {
          "description": "Validate an alias",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateRequest"
              },
              "examples": {
                "validateRequest1": {
                  "summary": "Basic validation request",
                  "description": "validateRequest1",
                  "value": {
                    "refno": "s5FRg9pBv",
                    "currency": "CHF",
                    "card": {
                      "alias": "AAABcH0Bq92s3kgAESIAAbGj5NIsAHWC",
                      "expiryMonth": "06",
                      "expiryYear": "25"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Alias successfully validated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeResponse"
                },
                "examples": {
                  "validateResponse": {
                    "description": "validateResponse",
                    "value": {
                      "transactionId": "240710141421428325",
                      "acquirerAuthorizationCode": "141421",
                      "card": {
                        "masked": "424242xxxxxx4242"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "validateErrorResponse": {
                    "description": "validateErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_PROPERTY",
                        "message": "validate.currency must be a 3 letter ISO 4217 character code"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/validate \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"refno\": \"s5FRg9pBv\",\n    \"currency\": \"CHF\",\n    \"card\": {\n        \"alias\": \"AAABcH0Bq92s3kgAESIAAbGj5NIsAHWC\",\n        \"expiryMonth\": \"06\",\n        \"expiryYear\": \"25\"\n    }\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/{transactionId}/increase": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Increase the authorized amount of a transaction",
        "description": "Use this API to increase the authorized amount for a transaction. The transaction must be in status `authorized`. The `transactionId` is needed to increase the amount for an authorization. Only credit cards support increase of the authorized amount.",
        "operationId": "increase",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The transactionId received after an authorization.",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Increase authorization amount",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncreaseRequest"
              },
              "examples": {
                "authorizeIncreaseRequest": {
                  "summary": "Authorize Increase request",
                  "description": "authorizeIncreaseRequest",
                  "value": {
                    "amount": 1000,
                    "currency": "GBP",
                    "refno": "jRLiV2ciz"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Increase authorization successfully authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncreaseResponse"
                },
                "examples": {
                  "authorizeIncreaseResponse": {
                    "description": "authorizeIncreaseResponse",
                    "value": {
                      "increasedAmount": 2000
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/240710141414068201/increase \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"amount\": 1000,\n    \"currency\": \"GBP\",\n    \"refno\": \"jRLiV2ciz\"\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/screen": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Screen the customer details",
        "description": "Check the customer's credit score before sending an actual authorization request. No amount will be blocked on the customers account. Currently, only invoicing method `INT` support screening.",
        "operationId": "screen",
        "requestBody": {
          "description": "Screen request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScreenRequest"
              },
              "examples": {
                "screenRequest": {
                  "summary": "Screen request",
                  "description": "screenRequest",
                  "value": {
                    "amount": 2000,
                    "currency": "CHF",
                    "refno": "jAOXRE3D8",
                    "customer": {
                      "id": "10067822",
                      "title": "Herr",
                      "firstName": "Markus",
                      "lastName": "Uberland",
                      "street": "Amstelstrasse",
                      "street2": "11",
                      "city": "Allschwil",
                      "country": "CH",
                      "zipCode": "4123",
                      "phone": "0448111111",
                      "cellPhone": "0448222222",
                      "email": "test@gmail.com",
                      "gender": "male",
                      "birthDate": "1986-05-14",
                      "language": "DE",
                      "type": "P",
                      "ipAddress": "213.55.184.229"
                    },
                    "INT": {
                      "deliveryMethod": "POST",
                      "deviceFingerprintId": "635822543440473727",
                      "paperInvoice": false,
                      "repaymentType": 4,
                      "riskOwner": "IJ",
                      "verifiedDocument1Type": "swiss-travel-pass",
                      "verifiedDocument1Number": "5000200001",
                      "verifiedDocument1Issuer": "SBB"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Screen successfully validated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeResponse"
                },
                "examples": {
                  "screenResponse": {
                    "description": "screenResponse",
                    "value": {
                      "transactionId": "240710141418078274",
                      "INT": {
                        "subtypes": [
                          "BYJUNO-INVOICE",
                          "INSTALLMENT"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/screen \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"amount\": 2000,\n    \"currency\": \"CHF\",\n    \"refno\": \"jAOXRE3D8\",\n    \"customer\": {\n        \"id\": \"10067822\",\n        \"title\": \"Herr\",\n        \"firstName\": \"Markus\",\n        \"lastName\": \"Uberland\",\n        \"street\": \"Amstelstrasse\",\n        \"street2\": \"11\",\n        \"city\": \"Allschwil\",\n        \"country\": \"CH\",\n        \"zipCode\": \"4123\",\n        \"phone\": \"0448111111\",\n        \"cellPhone\": \"0448222222\",\n        \"email\": \"test@gmail.com\",\n        \"gender\": \"male\",\n        \"birthDate\": \"1986-05-14\",\n        \"language\": \"DE\",\n        \"type\": \"P\",\n        \"ipAddress\": \"213.55.184.229\"\n    },\n    \"INT\": {\n        \"deliveryMethod\": \"POST\",\n        \"deviceFingerprintId\": \"635822543440473727\",\n        \"paperInvoice\": false,\n        \"repaymentType\": 4,\n        \"riskOwner\": \"IJ\",\n        \"verifiedDocument1Type\": \"swiss-travel-pass\",\n        \"verifiedDocument1Number\": \"5000200001\",\n        \"verifiedDocument1Issuer\": \"SBB\"\n    }\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/{transactionId}/settle": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Settle a transaction",
        "description": "The Settlement request is often also referred to as “Capture” or “Clearing”. It can be used for the settlement of previously authorized transactions. Only after settling a transaction the funds will be credited to your bank account. The `transactionId` is needed to settle an authorization. This API call is not needed if `autoSettle` was set to `true` when [initializing a transaction](#operation/init).",
        "operationId": "settle",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The transactionId received after an authorization.",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettleRequest"
              },
              "examples": {
                "settleRequest1": {
                  "summary": "Request to settle a transaction",
                  "description": "settleRequest1",
                  "value": {
                    "amount": 1000,
                    "currency": "CHF",
                    "refno": "UrPTU6MpQ"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Transaction successfully settled"
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "settleErrorResponse": {
                    "description": "settleErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_PROPERTY",
                        "message": "settle transactionId length must be 18 digits"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/240710141420818307/settle \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"amount\": 1000,\n    \"currency\": \"CHF\",\n    \"refno\": \"UrPTU6MpQ\"\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/{transactionId}/cancel": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Cancel a transaction",
        "description": "Cancel requests can be used to release a blocked amount from an authorization. The transaction must either be in status `authorized` or `settled`. The `transactionId` is needed to cancel an authorization",
        "operationId": "cancel",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The transactionId received after an authorization.",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Transaction successfully canceled"
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "cancelErrorResponse": {
                    "description": "cancelErrorResponse",
                    "value": {
                      "error": {
                        "code": "TRANSACTION_NOT_FOUND",
                        "message": "transactionId not found"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/240710141415388226/cancel \\\n\t--user {merchantId}:{password} \\\n",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/{transactionId}/credit": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Refund a transaction",
        "description": "Refund requests can be used to credit a transaction which is in status `settled` or `transmitted`. The previously settled amount must not be exceeded.",
        "operationId": "credit",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The transactionId received after an authorization.",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Credit a transaction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditRequest"
              },
              "examples": {
                "creditRequest": {
                  "summary": "Request to credit a transaction",
                  "description": "creditRequest",
                  "value": {
                    "amount": 1000,
                    "currency": "CHF",
                    "refno": "3chIjj228"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction successfully credited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditResponse"
                },
                "examples": {
                  "authorizeResponse": {
                    "description": "authorizeResponse",
                    "value": {
                      "transactionId": "240710141416368263",
                      "acquirerAuthorizationCode": "141416"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "creditErrorResponse": {
                    "description": "creditErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_TRANSACTION_STATUS",
                        "message": "the transaction cannot be credited"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/240710141415958252/credit \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"amount\": 1000,\n    \"currency\": \"CHF\",\n    \"refno\": \"3chIjj228\"\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/secureFields/{transactionId}": {
      "patch": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Update the amount of a Secure Fields transaction",
        "description": "Use this API to update the amount of a Secure Fields transaction. This action is only allowed before the 3D process. At least one property must be updated.",
        "operationId": "secure-fields-update",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The `transactionId` received from the [Initialize a Secure Fields transaction](#operation/secureFieldsInit) call",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecureFieldsUpdateRequest"
              },
              "examples": {
                "secureFieldsUpdateRequest": {
                  "summary": "Update request",
                  "description": "secureFieldsUpdateRequest",
                  "value": {
                    "amount": 1338
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Transaction successfully updated"
          },
          "409": {
            "description": "Invalid transaction status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "secureFieldsUpdateErrorResponse": {
                    "description": "secureFieldsUpdateErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_TRANSACTION_STATUS"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X PATCH https://api.sandbox.datatrans.com/v1/transactions/secureFields/240710141431498472 \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"amount\": 1338\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/{transactionId}": {
      "get": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Checking the status of a transaction",
        "description": "The API endpoint status can be used to check the status of any transaction, see its history, and retrieve the card information.",
        "operationId": "status",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The transactionId received after an authorization.",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status of a transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                },
                "examples": {
                  "statusResponse": {
                    "description": "statusResponse",
                    "value": {
                      "transactionId": "240710141420948314",
                      "merchantId": "1000001111",
                      "type": "payment",
                      "status": "authorized",
                      "currency": "CHF",
                      "refno": "Mvx3DGJUc",
                      "paymentMethod": "VIS",
                      "detail": {
                        "authorize": {
                          "amount": 1000,
                          "acquirerAuthorizationCode": "141421"
                        }
                      },
                      "card": {
                        "masked": "424242xxxxxx4242",
                        "expiryMonth": "06",
                        "expiryYear": "25",
                        "info": {
                          "brand": "VISA CREDIT",
                          "type": "credit",
                          "usage": "consumer",
                          "country": "GB",
                          "issuer": "DATATRANS"
                        }
                      },
                      "history": [
                        {
                          "action": "authorize",
                          "amount": 1000,
                          "source": "api",
                          "date": "2024-07-10T12:14:20Z",
                          "success": true,
                          "ip": "193.16.220.10"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "statusErrorResponse": {
                    "description": "statusErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_PROPERTY",
                        "message": "status transactionId length must be 18 digits"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X GET https://api.sandbox.datatrans.com/v1/transactions/240710141420948314 \\\n\t--user {merchantId}:{password} \\\n",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/secureFields/tokenize": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Initialize a Secure Fields tokenization",
        "operationId": "initTokenize",
        "parameters": [
          {
            "name": "client-name",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "ANDROID_SDK",
                "IOS_SDK",
                "LINK"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenizeSecureFieldsInitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Tokenization successfully initialized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureFieldsInitResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Something went wrong."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/v1/aliases/{alias}": {
      "get": {
        "tags": [
          "/v1/aliases"
        ],
        "summary": "Get alias info",
        "description": "Get alias info.",
        "operationId": "aliasesInfo",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
              "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
              "externalDocs": {
                "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful alias info response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasInfoResponse"
                },
                "examples": {
                  "aliasInfoResponse": {
                    "description": "aliasInfoResponse",
                    "value": {
                      "alias": "7LHXscqwAAEAAAGQnJCjw96fy0pzAPTN",
                      "fingerprint": "F-e5-sH1dWRS1onhDWSmmIgP",
                      "type": "CARD",
                      "masked": "424242xxxxxx4242",
                      "dateCreated": "2024-07-10T12:14:03Z",
                      "card": {
                        "panRemoved": false,
                        "last4": "4242",
                        "cardInfo": {
                          "brand": "VISA CREDIT",
                          "type": "credit",
                          "usage": "consumer",
                          "country": "GB",
                          "issuer": "DATATRANS"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasesResponseBase"
                },
                "examples": {
                  "infoErrorResponse": {
                    "description": "infoErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_ALIAS",
                        "message": "Invalid format"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X GET https://api.sandbox.datatrans.com/v1/aliases/7LHXscqwAAEAAAGQnJCjw96fy0pzAPTN \\\n\t--user {merchantId}:{password} \\\n",
            "lang": "shell"
          }
        ]
      },
      "delete": {
        "tags": [
          "/v1/aliases"
        ],
        "summary": "Delete alias",
        "description": "Delete an alias with immediate effect. The alias will no longer be recognized if used later with any API call.",
        "operationId": "aliasesDelete",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
              "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
              "externalDocs": {
                "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful delete"
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasesResponseBase"
                },
                "examples": {
                  "deleteErrorResponse": {
                    "description": "deleteErrorResponse",
                    "value": {
                      "error": {
                        "code": "ALIAS_NOT_FOUND"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X DELETE https://api.sandbox.datatrans.com/v1/aliases/7LHXscqwAAEAAAGQnJCnhxwUVUC6AJGE \\\n\t--user {merchantId}:{password} \\\n",
            "lang": "shell"
          }
        ]
      },
      "patch": {
        "tags": [
          "/v1/aliases"
        ],
        "summary": "Patch alias",
        "description": "Update an existing card alias with expiration year and month.",
        "operationId": "aliasesPatch",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AliasPatchRequest"
              },
              "examples": {
                "aliasPatchRequest": {
                  "summary": "Alias patch request example",
                  "description": "aliasPatchRequest",
                  "value": {
                    "removePlain": false,
                    "expiryMonth": "05",
                    "expiryYear": "25",
                    "createNetworkToken": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully patched alias",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasInfoResponse"
                },
                "examples": {
                  "aliasPatchResponse": {
                    "description": "aliasPatchResponse",
                    "value": {
                      "alias": "7LHXscqwAAEAAAGQnJCiybcnPXpwAPU_",
                      "fingerprint": "F-fnlcOgqPqxSdNfyYY0vXHk",
                      "type": "CARD",
                      "masked": "434343xxxxxx4345",
                      "dateCreated": "2024-07-10T12:14:02Z",
                      "card": {
                        "panRemoved": false,
                        "last4": "4345",
                        "expiryMonth": "05",
                        "expiryYear": "25",
                        "cardInfo": {
                          "brand": "VISA",
                          "type": "credit",
                          "usage": "consumer",
                          "country": "UA",
                          "issuer": "JSC UKRSIBBANK"
                        },
                        "networkToken": {
                          "expiryMonth": "07",
                          "expiryYear": "27",
                          "status": "ACTIVE",
                          "paymentAccountReference": "V0010013021088278311713045741",
                          "tokenRequestorId": "40010080572",
                          "token": "4622829030006726"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasesResponseBase"
                },
                "examples": {
                  "aliasPatchErrorResponse": {
                    "description": "aliasPatchErrorResponse",
                    "value": {
                      "alias": "7LHXscqwAAEAAAGQnJCqE2g9ZHdtAH9u",
                      "fingerprint": "F-e5-sH1dWRS1onhDWSmmIgP",
                      "type": "CARD",
                      "masked": "424242xxxxxx4242",
                      "dateCreated": "2024-07-10T12:14:04Z",
                      "card": {
                        "panRemoved": false,
                        "last4": "4242",
                        "cardInfo": {
                          "brand": "VISA CREDIT",
                          "type": "credit",
                          "usage": "consumer",
                          "country": "GB",
                          "issuer": "DATATRANS"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X PATCH https://api.sandbox.datatrans.com/v1/aliases/7LHXscqwAAEAAAGQnJCiybcnPXpwAPU_ \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"removePlain\": false,\n    \"expiryMonth\": \"05\",\n    \"expiryYear\": \"25\",\n    \"createNetworkToken\": true\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/aliases": {
      "post": {
        "tags": [
          "/v1/aliases"
        ],
        "summary": "Convert alias",
        "description": "Currently, only credit card aliases can be converted.",
        "operationId": "aliasesConvert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AliasConvertRequest"
              },
              "examples": {
                "aliasConvertRequest": {
                  "summary": "Convert request example",
                  "description": "aliasConvertRequest",
                  "value": {
                    "legacyAlias": "424242SKMPRI4242",
                    "type": "CARD"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully converted an alias",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasConvertResponse"
                },
                "examples": {
                  "aliasConvertResponse": {
                    "description": "aliasConvertResponse",
                    "value": {
                      "alias": "7LHXscqwAAEAAAGQnJCp68dkEgNUAJwg"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasesResponseBase"
                },
                "examples": {
                  "aliasGetErrorResponse": {
                    "description": "aliasGetErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_ALIAS"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/aliases \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"legacyAlias\": \"424242SKMPRI4242\",\n    \"type\": \"CARD\"\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/aliases/tokenize": {
      "post": {
        "tags": [
          "/v1/aliases"
        ],
        "summary": "Vault API: Bulk tokenization",
        "description": "Tokenize cards, CVVs and custom fields. It supports single and bulk tokenization for batches of requests.",
        "operationId": "aliasesTokenize",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkTokenizeRequest"
              },
              "examples": {
                "bulkTokenizeRequest": {
                  "summary": "Tokenize request example",
                  "description": "bulkTokenizeRequest",
                  "value": {
                    "requests": [
                      {
                        "type": "CARD",
                        "pan": "4343434343434345",
                        "expiryMonth": "05",
                        "expiryYear": "21",
                        "cardholder": {
                          "ipAddress": "127.0.0.1",
                          "phoneNumber": "123456789",
                          "emailAddress": "emailaddress@weareplanet.com"
                        },
                        "networkTokenOptions": {
                          "createNetworkToken": true
                        }
                      },
                      {
                        "type": "CVV",
                        "cvv": "123"
                      },
                      {
                        "type": "CVV",
                        "cvv": "invalid-value"
                      },
                      {
                        "type": "CUSTOM",
                        "custom": "customValue"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully received tokenization request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkTokenizeResponse"
                },
                "examples": {
                  "bulkTokenizationResponse": {
                    "description": "bulkTokenizationResponse",
                    "value": {
                      "overview": {
                        "total": 4,
                        "successful": 3,
                        "failed": 1
                      },
                      "responses": [
                        {
                          "type": "CARD",
                          "alias": "7LHXscqwAAEAAAGQnJCjSDPicd8DAL7O",
                          "maskedCC": "434343xxxxxx4345",
                          "fingerprint": "F-fnlcOgqPqxSdNfyYY0vXHk",
                          "networkToken": {
                            "status": "ACTIVE",
                            "tokenCreated": true
                          }
                        },
                        {
                          "type": "CVV",
                          "alias": "yjoUOnc1TmKkZEz-nJ5081L3",
                          "expiryDate": "2026-03-02T12:14:03Z"
                        },
                        {
                          "error": {
                            "code": "INVALID_CVV",
                            "message": "Not numeric."
                          },
                          "type": "CVV"
                        },
                        {
                          "type": "CUSTOM",
                          "alias": "SOYQOJSjSa2aU3Fj9CzsGw=="
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasesResponseBase"
                },
                "examples": {
                  "bulkTokenizationErrorResponse": {
                    "description": "bulkTokenizationErrorResponse",
                    "value": {
                      "error": {
                        "code": "MAX_REQUESTS_PER_CALL_EXCEEDED",
                        "message": "Too many requests. Maximum allowed requests per call is 100"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/aliases/tokenize \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"requests\": [\n        {\n            \"type\": \"CARD\",\n            \"pan\": \"4343434343434345\",\n            \"expiryMonth\": \"05\",\n            \"expiryYear\": \"21\",\n            \"cardholder\": {\n                \"ipAddress\": \"127.0.0.1\",\n                \"phoneNumber\": \"123456789\",\n                \"emailAddress\": \"emailaddress@weareplanet.com\"\n            },\n            \"networkTokenOptions\": {\n                \"createNetworkToken\": true\n            }\n        },\n        {\n            \"type\": \"CVV\",\n            \"cvv\": \"123\"\n        },\n        {\n            \"type\": \"CVV\",\n            \"cvv\": \"invalid-value\"\n        },\n        {\n            \"type\": \"CUSTOM\",\n            \"custom\": \"customValue\"\n        }\n    ]\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/aliases/detokenize": {
      "post": {
        "tags": [
          "/v1/aliases"
        ],
        "summary": "Vault API: Bulk detokenization",
        "description": "Detokenize cards, CVVs and custom fields. It supports single and bulk detokenization for batches of requests.",
        "operationId": "aliasesDetokenize",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDetokenizeRequest"
              },
              "examples": {
                "bulkDetokenizeRequest": {
                  "summary": "Detokenize request example",
                  "description": "bulkDetokenizeRequest",
                  "value": {
                    "requests": [
                      {
                        "type": "CARD",
                        "alias": "AAABcH0Bq92s3kgAESIAAbGj5NIsAHWC"
                      },
                      {
                        "type": "CARD",
                        "alias": "invalid-value"
                      },
                      {
                        "type": "CVV",
                        "alias": "TpNtIzfzQ3uLlBvs8mgIu8Pi"
                      },
                      {
                        "type": "CUSTOM",
                        "alias": "M5e4j2WWQJWo-jQ2SONrYw=="
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully received detokenization request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkDetokenizeResponse"
                },
                "examples": {
                  "bulkTokenizationResponse": {
                    "description": "bulkTokenizationResponse",
                    "value": {
                      "overview": {
                        "total": 4,
                        "successful": 3,
                        "failed": 1
                      },
                      "responses": [
                        {
                          "type": "CARD",
                          "pan": "4242424242424242"
                        },
                        {
                          "error": {
                            "code": "INVALID_ALIAS"
                          },
                          "type": "CARD"
                        },
                        {
                          "type": "CVV",
                          "cvv": "123"
                        },
                        {
                          "type": "CUSTOM",
                          "custom": "customValue"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasesResponseBase"
                },
                "examples": {
                  "bulkDetokenizationErrorResponse": {
                    "description": "bulkDetokenizationErrorResponse",
                    "value": {
                      "error": {
                        "code": "MAX_REQUESTS_PER_CALL_EXCEEDED",
                        "message": "Too many requests. Maximum allowed requests per call is 100"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/aliases/detokenize \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"requests\": [\n        {\n            \"type\": \"CARD\",\n            \"alias\": \"AAABcH0Bq92s3kgAESIAAbGj5NIsAHWC\"\n        },\n        {\n            \"type\": \"CARD\",\n            \"alias\": \"invalid-value\"\n        },\n        {\n            \"type\": \"CVV\",\n            \"alias\": \"TpNtIzfzQ3uLlBvs8mgIu8Pi\"\n        },\n        {\n            \"type\": \"CUSTOM\",\n            \"alias\": \"M5e4j2WWQJWo-jQ2SONrYw==\"\n        }\n    ]\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/reconciliations/sales": {
      "post": {
        "tags": [
          "/v1/reconciliations"
        ],
        "summary": "Report a sale",
        "description": "If you are a merchant using our reconciliation services, you can use this API to confirm a sale. The matching is based on the `transactionId`. The status of the transaction will change to `compensated`",
        "operationId": "saleReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleReportRequest"
              },
              "examples": {
                "saleReportRequest": {
                  "summary": "Basic sale report request",
                  "description": "saleReportRequest",
                  "value": {
                    "date": "2024-07-10T12:14:22.163+00:00",
                    "transactionId": "240710141420688304",
                    "currency": "CHF",
                    "amount": 1000,
                    "type": "payment",
                    "refno": "LIhfd9d7R"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction successfully reported",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleReportResponse"
                },
                "examples": {
                  "saleReportResponse": {
                    "description": "saleReportResponse",
                    "value": {
                      "transactionId": "240710141420688304",
                      "saleDate": "2024-07-10T12:14:22.163+00:00",
                      "reportedDate": "2024-07-10T12:14:22.259+00:00",
                      "matchResult": "MATCHED"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/reconciliations/sales \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"date\": \"2024-07-10T12:14:22.163+00:00\",\n    \"transactionId\": \"240710141420688304\",\n    \"currency\": \"CHF\",\n    \"amount\": 1000,\n    \"type\": \"payment\",\n    \"refno\": \"LIhfd9d7R\"\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/reconciliations/sales/bulk": {
      "post": {
        "tags": [
          "/v1/reconciliations"
        ],
        "summary": "Bulk reporting of sales",
        "description": "If you are a merchant using our reconciliation services, you can use this API to confirm multiple sales with a single API call. The matching is based on the `transactionId`. The status of the transaction will change to `compensated`",
        "operationId": "bulkSaleReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSaleReportRequest"
              },
              "examples": {
                "bulkSaleRequest": {
                  "summary": "Basic bulk sale request",
                  "description": "bulkSaleRequest",
                  "value": {
                    "sales": [
                      {
                        "date": "2024-07-10T12:14:22.753+00:00",
                        "transactionId": "240710141422418347",
                        "currency": "CHF",
                        "amount": 1000,
                        "type": "payment",
                        "refno": "39lWEb69l"
                      },
                      {
                        "date": "2024-07-10T12:14:23.147+00:00",
                        "transactionId": "240710141422808352",
                        "currency": "CHF",
                        "amount": 1000,
                        "type": "payment",
                        "refno": "GjQVbwnMm"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transactions successfully reported",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleReportResponse"
                },
                "examples": {
                  "bulkSaleResponse": {
                    "description": "bulkSaleResponse",
                    "value": {
                      "sales": [
                        {
                          "transactionId": "240710141422418347",
                          "saleDate": "2024-07-10T12:14:22.753+00:00",
                          "reportedDate": "2024-07-10T12:14:23.239+00:00",
                          "matchResult": "MATCHED"
                        },
                        {
                          "transactionId": "240710141422808352",
                          "saleDate": "2024-07-10T12:14:23.147+00:00",
                          "reportedDate": "2024-07-10T12:14:23.315+00:00",
                          "matchResult": "MATCHED"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/reconciliations/sales/bulk \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"sales\": [\n        {\n            \"date\": \"2024-07-10T12:14:22.753+00:00\",\n            \"transactionId\": \"240710141422418347\",\n            \"currency\": \"CHF\",\n            \"amount\": 1000,\n            \"type\": \"payment\",\n            \"refno\": \"39lWEb69l\"\n        },\n        {\n            \"date\": \"2024-07-10T12:14:23.147+00:00\",\n            \"transactionId\": \"240710141422808352\",\n            \"currency\": \"CHF\",\n            \"amount\": 1000,\n            \"type\": \"payment\",\n            \"refno\": \"GjQVbwnMm\"\n        }\n    ]\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/multicurrency/rates": {
      "get": {
        "tags": [
          "/v1/multicurrency"
        ],
        "summary": "Get conversion rates for different currencies",
        "description": "To get current rates call this endpoint. It will return all available rates for the configured merchant. Note: These rates are Acquirer specific, need a specific acquiring contract and need to be set up by Datatrans.",
        "operationId": "getRates",
        "responses": {
          "200": {
            "description": "Rates successfully fetched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiCurrencyReportResponse"
                },
                "examples": {
                  "authorizeResponse": {
                    "description": "authorizeResponse",
                    "value": {
                      "requestId": "53b6bcde-f632-427e-bef2-e71f6fac0946",
                      "reportDetail": {
                        "transactionDate": "2024-05-21T14:03:08Z",
                        "retrievalReferenceNumber": "414272722022"
                      },
                      "rates": [
                        {
                          "currency": "AED",
                          "currencyCode": "784",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 4.109765254318439
                        },
                        {
                          "currency": "AFN",
                          "currencyCode": "971",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 80.78327463082043
                        },
                        {
                          "currency": "ALL",
                          "currencyCode": "008",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 104.59047599125624
                        },
                        {
                          "currency": "AMD",
                          "currencyCode": "051",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 434.7826086956522
                        },
                        {
                          "currency": "ANG",
                          "currencyCode": "532",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 2.0025299963974486
                        },
                        {
                          "currency": "AOA",
                          "currencyCode": "973",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 933.0969487729774
                        },
                        {
                          "currency": "ARS",
                          "currencyCode": "032",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 989.2175289346128
                        },
                        {
                          "currency": "AUD",
                          "currencyCode": "036",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 1.6994224682683836
                        },
                        {
                          "currency": "AWG",
                          "currencyCode": "533",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 2.0025299963974486
                        },
                        {
                          "currency": "AZN",
                          "currencyCode": "944",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 1.9074381312904924
                        },
                        {
                          "currency": "BAM",
                          "currencyCode": "977",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 2.032745084009289
                        },
                        {
                          "currency": "BBD",
                          "currencyCode": "052",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 2.2262735453472997
                        },
                        {
                          "currency": "BDT",
                          "currencyCode": "050",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 131.45095564844755
                        },
                        {
                          "currency": "BGN",
                          "currencyCode": "975",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 2.032745084009289
                        },
                        {
                          "currency": "BHD",
                          "currencyCode": "048",
                          "decimalPlaces": 3,
                          "roundUnit": 0,
                          "value": 0.42176175960355744
                        },
                        {
                          "currency": "BIF",
                          "currencyCode": "108",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 3191.8289179699964
                        },
                        {
                          "currency": "BMD",
                          "currencyCode": "060",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 1.1187315374335962
                        },
                        {
                          "currency": "BND",
                          "currencyCode": "096",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 1.5166628927038353
                        },
                        {
                          "currency": "BOB",
                          "currencyCode": "068",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 7.786379131258108
                        },
                        {
                          "currency": "BRL",
                          "currencyCode": "986",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 5.77925778148164
                        },
                        {
                          "currency": "BSD",
                          "currencyCode": "044",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 1.1187315374335962
                        },
                        {
                          "currency": "BTN",
                          "currencyCode": "064",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 93.49289454001496
                        },
                        {
                          "currency": "BWP",
                          "currencyCode": "072",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 15.200155649593853
                        },
                        {
                          "currency": "BYN",
                          "currencyCode": "933",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 3.6170839214108943
                        },
                        {
                          "currency": "BZD",
                          "currencyCode": "084",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 2.217883549137099
                        },
                        {
                          "currency": "CAD",
                          "currencyCode": "124",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 1.5317660711364418
                        },
                        {
                          "currency": "CDF",
                          "currencyCode": "976",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 3174.6031746031745
                        },
                        {
                          "currency": "CHF",
                          "currencyCode": "756",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 1.016926952509918
                        },
                        {
                          "currency": "CLP",
                          "currencyCode": "152",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 1030.2905419328251
                        },
                        {
                          "currency": "CNY",
                          "currencyCode": "156",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 8.093731890274896
                        },
                        {
                          "currency": "COP",
                          "currencyCode": "170",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 4349.717268377555
                        },
                        {
                          "currency": "CRC",
                          "currencyCode": "188",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 575.7715338553662
                        },
                        {
                          "currency": "CUP",
                          "currencyCode": "192",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 26.849529864732066
                        },
                        {
                          "currency": "CVE",
                          "currencyCode": "132",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 114.60135917211979
                        },
                        {
                          "currency": "CZK",
                          "currencyCode": "203",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 25.9164712132796
                        },
                        {
                          "currency": "DJF",
                          "currencyCode": "262",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 198.68865487780647
                        },
                        {
                          "currency": "DKK",
                          "currencyCode": "208",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 7.753248223343171
                        },
                        {
                          "currency": "DOP",
                          "currencyCode": "214",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 65.66462449684481
                        },
                        {
                          "currency": "DZD",
                          "currencyCode": "012",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 150.2245857557048
                        },
                        {
                          "currency": "EGP",
                          "currencyCode": "818",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 52.71675813024202
                        },
                        {
                          "currency": "ERN",
                          "currencyCode": "232",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 16.780973061503943
                        },
                        {
                          "currency": "ETB",
                          "currencyCode": "230",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 64.36373232411
                        },
                        {
                          "currency": "FJD",
                          "currencyCode": "242",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 2.566486764499431
                        },
                        {
                          "currency": "FKP",
                          "currencyCode": "238",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 0.8944843056467184
                        },
                        {
                          "currency": "GBP",
                          "currencyCode": "826",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 0.893187941391151
                        },
                        {
                          "currency": "GEL",
                          "currencyCode": "981",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 3.0317601125874436
                        },
                        {
                          "currency": "GHS",
                          "currencyCode": "936",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 15.886002049294262
                        },
                        {
                          "currency": "GIP",
                          "currencyCode": "292",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 0.8944843056467184
                        },
                        {
                          "currency": "GMD",
                          "currencyCode": "270",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 71.53126989463443
                        },
                        {
                          "currency": "GNF",
                          "currencyCode": "324",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 9514.747859181733
                        },
                        {
                          "currency": "GTQ",
                          "currencyCode": "320",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 8.703712568596135
                        },
                        {
                          "currency": "GYD",
                          "currencyCode": "328",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 234.18655300812628
                        },
                        {
                          "currency": "HKD",
                          "currencyCode": "344",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 8.7441173950225
                        },
                        {
                          "currency": "HNL",
                          "currencyCode": "340",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 27.59572266298724
                        },
                        {
                          "currency": "HTG",
                          "currencyCode": "332",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 148.80288082377274
                        },
                        {
                          "currency": "HUF",
                          "currencyCode": "348",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 403.68157597287257
                        },
                        {
                          "currency": "IDR",
                          "currencyCode": "360",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 18018.018018018018
                        },
                        {
                          "currency": "ILS",
                          "currencyCode": "376",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 4.181923718365838
                        },
                        {
                          "currency": "INR",
                          "currencyCode": "356",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 93.49289454001496
                        },
                        {
                          "currency": "IQD",
                          "currencyCode": "368",
                          "decimalPlaces": 3,
                          "roundUnit": 0,
                          "value": 1465.630954125751
                        },
                        {
                          "currency": "IRR",
                          "currencyCode": "364",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 46948.35680751174
                        },
                        {
                          "currency": "ISK",
                          "currencyCode": "352",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 156.18654921438167
                        },
                        {
                          "currency": "JMD",
                          "currencyCode": "388",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 174.52311558665946
                        },
                        {
                          "currency": "JOD",
                          "currencyCode": "400",
                          "decimalPlaces": 3,
                          "roundUnit": 0,
                          "value": 0.7942997870085121
                        },
                        {
                          "currency": "JPY",
                          "currencyCode": "392",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 174.63893400394684
                        },
                        {
                          "currency": "KES",
                          "currencyCode": "404",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 146.83425349465523
                        },
                        {
                          "currency": "KGS",
                          "currencyCode": "417",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 98.82790109303659
                        },
                        {
                          "currency": "KHR",
                          "currencyCode": "116",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 4562.043795620438
                        },
                        {
                          "currency": "KMF",
                          "currencyCode": "174",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 511.3258679756609
                        },
                        {
                          "currency": "KRW",
                          "currencyCode": "410",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 1526.9506794930523
                        },
                        {
                          "currency": "KWD",
                          "currencyCode": "414",
                          "decimalPlaces": 3,
                          "roundUnit": 0,
                          "value": 0.3444243128433588
                        },
                        {
                          "currency": "KYD",
                          "currencyCode": "136",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 0.9322762811946635
                        },
                        {
                          "currency": "KZT",
                          "currencyCode": "398",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 494.90250420667127
                        },
                        {
                          "currency": "LAK",
                          "currencyCode": "418",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 23980.815347721826
                        },
                        {
                          "currency": "LBP",
                          "currencyCode": "422",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 99999.99999999999
                        },
                        {
                          "currency": "LKR",
                          "currencyCode": "144",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 335.8409457281032
                        },
                        {
                          "currency": "LRD",
                          "currencyCode": "430",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 214.79508548844402
                        },
                        {
                          "currency": "LSL",
                          "currencyCode": "426",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 20.676066006273118
                        },
                        {
                          "currency": "LYD",
                          "currencyCode": "434",
                          "decimalPlaces": 3,
                          "roundUnit": 0,
                          "value": 5.420815171343836
                        },
                        {
                          "currency": "MAD",
                          "currencyCode": "504",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 11.19608942988393
                        },
                        {
                          "currency": "MDL",
                          "currencyCode": "498",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 19.712046425811742
                        },
                        {
                          "currency": "MGA",
                          "currencyCode": "969",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 4938.271604938272
                        },
                        {
                          "currency": "MKD",
                          "currencyCode": "807",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 63.72958263496333
                        },
                        {
                          "currency": "MMK",
                          "currencyCode": "104",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 3709.19881305638
                        },
                        {
                          "currency": "MNT",
                          "currencyCode": "496",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 3763.643206624012
                        },
                        {
                          "currency": "MOP",
                          "currencyCode": "446",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 9.010835529724494
                        },
                        {
                          "currency": "MRU",
                          "currencyCode": "929",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 43.91357807834182
                        },
                        {
                          "currency": "MUR",
                          "currencyCode": "480",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 52.22504817760694
                        },
                        {
                          "currency": "MVR",
                          "currencyCode": "462",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 17.340338830220745
                        },
                        {
                          "currency": "MWK",
                          "currencyCode": "454",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 1958.8638589618022
                        },
                        {
                          "currency": "MXN",
                          "currencyCode": "484",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 18.80275347521891
                        },
                        {
                          "currency": "MYR",
                          "currencyCode": "458",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 5.312846995319382
                        },
                        {
                          "currency": "MZN",
                          "currencyCode": "943",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 70.78192795815372
                        },
                        {
                          "currency": "NAD",
                          "currencyCode": "516",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 20.676066006273118
                        },
                        {
                          "currency": "NGN",
                          "currencyCode": "566",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 1622.0600162206003
                        },
                        {
                          "currency": "NIO",
                          "currencyCode": "558",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 40.972691700981294
                        },
                        {
                          "currency": "NOK",
                          "currencyCode": "578",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 12.270013926465806
                        },
                        {
                          "currency": "NPR",
                          "currencyCode": "524",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 149.58863126402395
                        },
                        {
                          "currency": "NZD",
                          "currencyCode": "554",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 1.865171246967698
                        },
                        {
                          "currency": "OMR",
                          "currencyCode": "512",
                          "decimalPlaces": 3,
                          "roundUnit": 0,
                          "value": 0.43068883640323313
                        },
                        {
                          "currency": "PAB",
                          "currencyCode": "590",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 1.1187315374335962
                        },
                        {
                          "currency": "PEN",
                          "currencyCode": "604",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 4.160446798702606
                        },
                        {
                          "currency": "PGK",
                          "currencyCode": "598",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 4.404453960022534
                        },
                        {
                          "currency": "PHP",
                          "currencyCode": "608",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 64.69602572313983
                        },
                        {
                          "currency": "PKR",
                          "currencyCode": "586",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 311.4197626981408
                        },
                        {
                          "currency": "PLN",
                          "currencyCode": "985",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 4.476484133549637
                        },
                        {
                          "currency": "PYG",
                          "currencyCode": "600",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 8424.599831508003
                        },
                        {
                          "currency": "QAR",
                          "currencyCode": "634",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 4.0721868417055465
                        },
                        {
                          "currency": "RON",
                          "currencyCode": "946",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 5.17849763498013
                        },
                        {
                          "currency": "RSD",
                          "currencyCode": "941",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 121.56133377095412
                        },
                        {
                          "currency": "RUB",
                          "currencyCode": "643",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 104.06693585314073
                        },
                        {
                          "currency": "RWF",
                          "currencyCode": "646",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 1456.8764568764568
                        },
                        {
                          "currency": "SAR",
                          "currencyCode": "682",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 4.196244948245613
                        },
                        {
                          "currency": "SBD",
                          "currencyCode": "090",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 9.749296831965994
                        },
                        {
                          "currency": "SCR",
                          "currencyCode": "690",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 15.640983129635599
                        },
                        {
                          "currency": "SEK",
                          "currencyCode": "752",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 12.163955523713025
                        },
                        {
                          "currency": "SGD",
                          "currencyCode": "702",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 1.5144647283436465
                        },
                        {
                          "currency": "SHP",
                          "currencyCode": "654",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 0.8944843056467184
                        },
                        {
                          "currency": "SLE",
                          "currencyCode": "925",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 25.403277022735935
                        },
                        {
                          "currency": "SOS",
                          "currencyCode": "706",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 635.4451293130838
                        },
                        {
                          "currency": "SRD",
                          "currencyCode": "968",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 36.53675414783501
                        },
                        {
                          "currency": "SZL",
                          "currencyCode": "748",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 20.676066006273118
                        },
                        {
                          "currency": "THB",
                          "currencyCode": "764",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 41.22521334047904
                        },
                        {
                          "currency": "TJS",
                          "currencyCode": "972",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 12.192713146914878
                        },
                        {
                          "currency": "TMT",
                          "currencyCode": "934",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 3.9054902600978405
                        },
                        {
                          "currency": "TND",
                          "currencyCode": "788",
                          "decimalPlaces": 3,
                          "roundUnit": 0,
                          "value": 3.504984087372243
                        },
                        {
                          "currency": "TOP",
                          "currencyCode": "776",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 2.7104340326433833
                        },
                        {
                          "currency": "TRY",
                          "currencyCode": "949",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 36.204730510088446
                        },
                        {
                          "currency": "TTD",
                          "currencyCode": "780",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 7.488364952954347
                        },
                        {
                          "currency": "TWD",
                          "currencyCode": "901",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 36.28157403980814
                        },
                        {
                          "currency": "TZS",
                          "currencyCode": "834",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 2908.667830133799
                        },
                        {
                          "currency": "UAH",
                          "currencyCode": "980",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 44.436544614290796
                        },
                        {
                          "currency": "UGX",
                          "currencyCode": "800",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 4206.983592763988
                        },
                        {
                          "currency": "USD",
                          "currencyCode": "840",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 1.1187315374335962
                        },
                        {
                          "currency": "UYU",
                          "currencyCode": "858",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 43.10586369063784
                        },
                        {
                          "currency": "UZS",
                          "currencyCode": "860",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 14204.545454545454
                        },
                        {
                          "currency": "VES",
                          "currencyCode": "928",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 40.956749672346
                        },
                        {
                          "currency": "VND",
                          "currencyCode": "704",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 28490.02849002849
                        },
                        {
                          "currency": "VUV",
                          "currencyCode": "548",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 139.2990471945172
                        },
                        {
                          "currency": "WST",
                          "currencyCode": "882",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 3.1566912067841084
                        },
                        {
                          "currency": "XAF",
                          "currencyCode": "950",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 681.7562039814562
                        },
                        {
                          "currency": "XCD",
                          "currencyCode": "951",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 3.0073424265343833
                        },
                        {
                          "currency": "XOF",
                          "currencyCode": "952",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 681.7562039814562
                        },
                        {
                          "currency": "XPF",
                          "currencyCode": "953",
                          "decimalPlaces": 0,
                          "roundUnit": 0,
                          "value": 124.024854580858
                        },
                        {
                          "currency": "YER",
                          "currencyCode": "886",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 280.245495053667
                        },
                        {
                          "currency": "ZAR",
                          "currencyCode": "710",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 20.676066006273118
                        },
                        {
                          "currency": "ZMW",
                          "currencyCode": "967",
                          "decimalPlaces": 2,
                          "roundUnit": 0,
                          "value": 28.583597017015816
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X GET https://api.sandbox.datatrans.com/v1/multicurrency/rates \\\n\t--user {merchantId}:{password} \\\n",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/openapi": {
      "get": {
        "tags": [
          "/v1/openapi"
        ],
        "operationId": "get",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AliasInfoCardInfoDetail": {
        "type": "object",
        "properties": {
          "panRemoved": {
            "type": "boolean",
            "description": "Indicates if PAN has been removed."
          },
          "bin": {
            "type": "string"
          },
          "last4": {
            "type": "string"
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the card. Currently not available when the Convert API was used before."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the card. Currently not available when the Convert API was used before."
          },
          "cardInfo": {
            "$ref": "#/components/schemas/CardInfo"
          },
          "networkToken": {
            "$ref": "#/components/schemas/TokenInfo"
          },
          "altId": {
            "$ref": "#/components/schemas/TokenInfo"
          },
          "walletIndicator": {
            "type": "string",
            "enum": [
              "APL",
              "PAY"
            ]
          },
          "3D": {
            "$ref": "#/components/schemas/ThreeDInfo"
          }
        },
        "description": "Information about the card behind the alias if available. For some cards (e.g. Boncard) no information will be returned."
      },
      "AliasInfoResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The requested alias.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "fingerprint": {
            "maxLength": 24,
            "minLength": 24,
            "pattern": "F-[A-Za-z0-9_-]{22}",
            "type": "string",
            "description": "An unique identifier of the card number. Useful to identify multiple customers' or the same customer's transactions where the same card was used.",
            "example": "F-coGuJQ55tUk8CnKGI9PX1T"
          },
          "type": {
            "type": "string",
            "enum": [
              "CARD",
              "PFC",
              "REK",
              "IBAN",
              "TWI",
              "KLN",
              "INT",
              "PAP",
              "ESY",
              "MFX",
              "MPX",
              "SWP",
              "MDP",
              "ALP",
              "PLU"
            ]
          },
          "masked": {
            "type": "string",
            "description": "The nonsensitive masked representation of the value behind the alias (e.g. `490000xxxxxx0003` for aliases of type `CARD`)"
          },
          "dateCreated": {
            "type": "string",
            "description": "Creation date",
            "format": "date-time"
          },
          "card": {
            "$ref": "#/components/schemas/AliasInfoCardInfoDetail"
          }
        }
      },
      "AliasesError": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/AliasesErrorCode"
          },
          "message": {
            "type": "string",
            "description": "A human readable message indicating what went wrong."
          }
        }
      },
      "AliasesErrorCode": {
        "type": "string",
        "enum": [
          "PLAIN_NOT_FOUND",
          "INVALID_EXPIRATION",
          "CLIENT_ERROR",
          "INVALID_CVV",
          "UNKNOWN_ERROR",
          "UNRECOGNIZED_PROPERTY",
          "SERVER_ERROR",
          "ILLEGAL_ARGUMENT",
          "UNAUTHORIZED",
          "COULD_NOT_OBTAIN_NETWORK_TOKEN",
          "MAX_REQUESTS_PER_CALL_EXCEEDED",
          "VELOCITY_ERROR",
          "INVALID_PLAIN_VALUE",
          "INTERNAL_ERROR",
          "INVALID_JSON_PAYLOAD",
          "SCHEME_ERROR",
          "INVALID_CONFIGURATION",
          "COULD_NOT_DECRYPT_TOKEN",
          "ALIAS_NOT_FOUND",
          "COULD_NOT_DELETE_NETWORK_TOKEN",
          "DECLINED",
          "FORBIDDEN",
          "INVALID_ALIAS",
          "INVALID_STATE",
          "INVALID_PROPERTY",
          "INVALID_HEADER",
          "INVALID_TOKEN",
          "ISSUER_ERROR",
          "DELETE_NOT_ALLOWED",
          "SERVICE_NOT_ALLOWED"
        ]
      },
      "CardInfo": {
        "type": "object",
        "properties": {
          "brand": {
            "type": "string",
            "description": "The brand of the credit card (e.g. VISA CREDIT)."
          },
          "type": {
            "type": "string",
            "description": "The type of the card (`credit`, `debit` or `prepaid`). The property will not be present if the card type is unknown."
          },
          "usage": {
            "type": "string",
            "description": "The usage of the card (`consumer`, `corporate` or `unknown`)"
          },
          "country": {
            "type": "string",
            "description": "2 letter ISO 3166-1 alpha-2 country code"
          },
          "issuer": {
            "type": "string",
            "description": "The issuer of the card"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "PAN",
              "TOKEN"
            ]
          }
        },
        "description": "The card information if the request was done with a card object"
      },
      "NetworkTokenError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "SERVICE_NOT_ALLOWED",
              "INTERNAL_ERROR",
              "REQUIRE_ADDITIONAL_AUTHENTICATION",
              "MISSING_FIELD",
              "INVALID_PAN",
              "SCHEME_ERROR",
              "DECLINED",
              "INVALID_TOKEN",
              "ISSUER_ERROR",
              "WAITING_ACTIVATION",
              "UNKNOWN_ERROR"
            ]
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ThreeDInfo": {
        "type": "object",
        "properties": {
          "cavv": {
            "type": "string",
            "description": "The cavv of the card."
          },
          "eci": {
            "type": "string",
            "description": "The eci of the card."
          }
        },
        "description": "The 3D information of the card."
      },
      "TokenInfo": {
        "type": "object",
        "properties": {
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the scheme token"
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the scheme token"
          },
          "status": {
            "type": "string",
            "description": "The status of the scheme token",
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "SUSPENDED",
              "DELETED",
              "PENDING",
              "FAILED"
            ]
          },
          "paymentAccountReference": {
            "maxLength": 29,
            "minLength": 0,
            "type": "string",
            "description": "The Payment Account Reference of the scheme token",
            "example": "5001a9f027e5629d11e3949a0800a"
          },
          "tokenRequestorId": {
            "type": "string",
            "description": "The token requestor id"
          },
          "token": {
            "type": "string",
            "description": "Scheme token"
          },
          "reason": {
            "$ref": "#/components/schemas/NetworkTokenError"
          }
        },
        "description": "Scheme token details. This information is only available if the card behind the alias has been tokenized."
      },
      "AliasesResponseBase": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/AliasesError"
          }
        }
      },
      "AliasConvertResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The requested alias.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        }
      },
      "AliasConvertRequest": {
        "required": [
          "legacyAlias"
        ],
        "type": "object",
        "properties": {
          "legacyAlias": {
            "type": "string",
            "description": "The legacy alias",
            "example": "424242SKMPRI4242"
          },
          "type": {
            "type": "string",
            "description": "Legacy alias type.",
            "enum": [
              "CARD",
              "PFC",
              "TWI",
              "PAP",
              "INT",
              "REK"
            ]
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "CARD": "#/components/schemas/CardAliasConvertRequest",
            "PFC": "#/components/schemas/PostFinanceAliasConvertRequest",
            "TWI": "#/components/schemas/TwintAliasConvertRequest",
            "PAP": "#/components/schemas/PayPalAliasConvertRequest",
            "INT": "#/components/schemas/ByjunoAliasConvertRequest",
            "REK": "#/components/schemas/RekaAliasConvertRequest"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CardAliasConvertRequest"
          },
          {
            "$ref": "#/components/schemas/PostFinanceAliasConvertRequest"
          },
          {
            "$ref": "#/components/schemas/TwintAliasConvertRequest"
          },
          {
            "$ref": "#/components/schemas/PayPalAliasConvertRequest"
          },
          {
            "$ref": "#/components/schemas/ByjunoAliasConvertRequest"
          },
          {
            "$ref": "#/components/schemas/RekaAliasConvertRequest"
          }
        ]
      },
      "ByjunoAliasConvertRequest": {
        "required": [
          "legacyAlias",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "INT"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AliasConvertRequest"
          }
        ]
      },
      "CardAliasConvertRequest": {
        "required": [
          "legacyAlias",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "CARD"
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the credit card behind alias."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the credit card behind the alias"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AliasConvertRequest"
          }
        ]
      },
      "PayPalAliasConvertRequest": {
        "required": [
          "legacyAlias",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "PAP"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AliasConvertRequest"
          }
        ]
      },
      "PostFinanceAliasConvertRequest": {
        "required": [
          "legacyAlias",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "PFC"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AliasConvertRequest"
          }
        ]
      },
      "RekaAliasConvertRequest": {
        "required": [
          "legacyAlias",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "REK"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AliasConvertRequest"
          }
        ]
      },
      "TwintAliasConvertRequest": {
        "required": [
          "legacyAlias",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "TWI"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AliasConvertRequest"
          }
        ]
      },
      "AliasPatchRequest": {
        "type": "object",
        "properties": {
          "removePlain": {
            "type": "boolean",
            "description": "Remove the pan from storage."
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the card."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of card."
          },
          "cardholder": {
            "$ref": "#/components/schemas/CardholderData"
          },
          "createNetworkToken": {
            "type": "boolean",
            "description": "Create a Network Token."
          }
        }
      },
      "CardholderData": {
        "type": "object",
        "properties": {
          "ipAddress": {
            "type": "string",
            "description": "IP address."
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number."
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address."
          }
        }
      },
      "ApplePayTokenizeResponse": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "APPLE_PAY"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenizeResponse"
          }
        ]
      },
      "BulkTokenizeResponse": {
        "type": "object",
        "properties": {
          "overview": {
            "$ref": "#/components/schemas/ResponseOverview"
          },
          "responses": {
            "type": "array",
            "description": "List of tokenization responses.",
            "items": {
              "$ref": "#/components/schemas/TokenizeResponse"
            }
          }
        }
      },
      "CardTokenizeResponse": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "CARD"
          },
          "alias": {
            "type": "string",
            "description": "The requested alias.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt"
          },
          "maskedCC": {
            "type": "string",
            "description": "The nonsensitive masked representation of the value behind the alias.",
            "example": "490000xxxxxx0003"
          },
          "fingerprint": {
            "maxLength": 24,
            "minLength": 24,
            "pattern": "F-[A-Za-z0-9_-]{22}",
            "type": "string",
            "description": "An unique identifier of the card number. Useful to identify multiple customers' or the same customer's transactions where the same card was used.",
            "example": "F-coGuJQ55tUk8CnKGI9PX1T"
          },
          "networkToken": {
            "$ref": "#/components/schemas/NetworkTokenInfo"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenizeResponse"
          }
        ]
      },
      "CustomTokenizeResponse": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "CUSTOM"
          },
          "alias": {
            "type": "string",
            "description": "The requested alias.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenizeResponse"
          }
        ]
      },
      "CvvTokenizeResponse": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "CVV"
          },
          "alias": {
            "type": "string",
            "description": "The requested CVV alias. CVV aliases have a limited lifespan of 30 minutes and can't be detokenized anymore when expired.",
            "example": "oE9AUiL1S36de4oSVOkSaLVt"
          },
          "expiryDate": {
            "type": "string",
            "description": "The alias expiration date.",
            "format": "date-time"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenizeResponse"
          }
        ]
      },
      "NetworkTokenInfo": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "SUSPENDED",
              "DELETED",
              "PENDING",
              "FAILED"
            ]
          },
          "tokenCreated": {
            "type": "boolean",
            "description": "If a network token was requested then this value informs if it was successfully created or not."
          },
          "reason": {
            "$ref": "#/components/schemas/NetworkTokenError"
          },
          "token": {
            "type": "string"
          },
          "expiryMonth": {
            "type": "string"
          },
          "expiryYear": {
            "type": "string"
          }
        }
      },
      "ResponseOverview": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total requests.",
            "format": "int32"
          },
          "successful": {
            "type": "integer",
            "description": "Successful requests.",
            "format": "int32"
          },
          "failed": {
            "type": "integer",
            "description": "Failed requests.",
            "format": "int32"
          }
        },
        "description": "Overview of results."
      },
      "TokenizeResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CARD",
              "CVV",
              "CUSTOM",
              "APPLE_PAY",
              "GOOGLE_PAY"
            ]
          }
        },
        "description": "List of tokenization responses.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "CARD": "#/components/schemas/CardTokenizeResponse",
            "CVV": "#/components/schemas/CvvTokenizeResponse",
            "CUSTOM": "#/components/schemas/CustomTokenizeResponse"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CardTokenizeResponse"
          },
          {
            "$ref": "#/components/schemas/CvvTokenizeResponse"
          },
          {
            "$ref": "#/components/schemas/CustomTokenizeResponse"
          }
        ]
      },
      "ApplePayTokenizeRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "APPLE_PAY"
          },
          "token": {
            "type": "string",
            "description": "A wallet provider token containing encrypted card details."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenizeRequest"
          }
        ]
      },
      "BulkTokenizeRequest": {
        "required": [
          "requests"
        ],
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "description": "List of tokenization requests.",
            "items": {
              "$ref": "#/components/schemas/TokenizeRequest"
            }
          }
        }
      },
      "CardTokenizeRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "CARD"
          },
          "pan": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "\\d{13,19}",
            "type": "string",
            "description": "The card number."
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the card."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the card."
          },
          "cardholder": {
            "$ref": "#/components/schemas/CardholderData"
          },
          "networkTokenOptions": {
            "$ref": "#/components/schemas/TokenizeNetworkTokenOptions"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenizeRequest"
          }
        ]
      },
      "CustomTokenizeRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "CUSTOM"
          },
          "custom": {
            "maxLength": 7500,
            "pattern": "\\d{0,7500}",
            "type": "string",
            "description": "The custom field to be tokenized."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenizeRequest"
          }
        ]
      },
      "CvvTokenizeRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "CVV"
          },
          "cvv": {
            "maxLength": 4,
            "minLength": 3,
            "pattern": "\\d{3,4}",
            "type": "string",
            "description": "The CVV number."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenizeRequest"
          }
        ]
      },
      "GooglePayTokenizeRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "GOOGLE_PAY"
          },
          "token": {
            "type": "string",
            "description": "A wallet provider token containing encrypted card details."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenizeRequest"
          }
        ]
      },
      "TokenizeNetworkTokenOptions": {
        "type": "object",
        "properties": {
          "createNetworkToken": {
            "type": "boolean",
            "description": "Create a Network Token."
          }
        }
      },
      "TokenizeRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CARD",
              "CVV",
              "CUSTOM",
              "APPLE_PAY",
              "GOOGLE_PAY"
            ]
          }
        },
        "description": "List of tokenization requests.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "CARD": "#/components/schemas/CardTokenizeRequest",
            "CVV": "#/components/schemas/CvvTokenizeRequest",
            "CUSTOM": "#/components/schemas/CustomTokenizeRequest",
            "APPLE_PAY": "#/components/schemas/ApplePayTokenizeRequest",
            "GOOGLE_PAY": "#/components/schemas/GooglePayTokenizeRequest"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CardTokenizeRequest"
          },
          {
            "$ref": "#/components/schemas/CvvTokenizeRequest"
          },
          {
            "$ref": "#/components/schemas/CustomTokenizeRequest"
          },
          {
            "$ref": "#/components/schemas/ApplePayTokenizeRequest"
          },
          {
            "$ref": "#/components/schemas/GooglePayTokenizeRequest"
          }
        ]
      },
      "BulkDetokenizeResponse": {
        "type": "object",
        "properties": {
          "overview": {
            "$ref": "#/components/schemas/ResponseOverview"
          },
          "responses": {
            "type": "array",
            "description": "List of detokenization responses.",
            "items": {
              "$ref": "#/components/schemas/DetokenizeResponse"
            }
          }
        }
      },
      "CardDetokenizeResponse": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "CARD"
          },
          "pan": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "\\d{13,19}",
            "type": "string",
            "description": "The card number."
          },
          "networkToken": {
            "$ref": "#/components/schemas/NetworkToken"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/DetokenizeResponse"
          }
        ]
      },
      "CustomDetokenizeResponse": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "CUSTOM"
          },
          "custom": {
            "maxLength": 7500,
            "pattern": "\\d{0,7500}",
            "type": "string",
            "description": "The detokenized plain value."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/DetokenizeResponse"
          }
        ]
      },
      "CvvDetokenizeResponse": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "CVV"
          },
          "cvv": {
            "maxLength": 4,
            "minLength": 3,
            "pattern": "\\d{3,4}",
            "type": "string",
            "description": "The CVV number."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/DetokenizeResponse"
          }
        ]
      },
      "DetokenizeResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CARD",
              "CVV",
              "CUSTOM",
              "PFC",
              "REK",
              "IBAN",
              "IBAN_ACCOUNT_NUMBER",
              "IBAN_BRANCH_CODE",
              "TWI",
              "KLN",
              "INT",
              "PAP",
              "ESY",
              "MFX",
              "MPX",
              "SWP",
              "MDP",
              "ALP",
              "PLU"
            ]
          }
        },
        "description": "List of detokenization responses.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "CARD": "#/components/schemas/CardDetokenizeResponse",
            "CVV": "#/components/schemas/CvvDetokenizeResponse",
            "CUSTOM": "#/components/schemas/CustomDetokenizeResponse"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CardDetokenizeResponse"
          },
          {
            "$ref": "#/components/schemas/CvvDetokenizeResponse"
          },
          {
            "$ref": "#/components/schemas/CustomDetokenizeResponse"
          }
        ]
      },
      "NetworkToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Network token."
          },
          "status": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "SUSPENDED",
              "DELETED",
              "PENDING",
              "FAILED"
            ]
          },
          "cryptogram": {
            "type": "string",
            "description": "Cryptogram."
          },
          "eci": {
            "maxLength": 2,
            "minLength": 1,
            "type": "string",
            "description": "Electronic Commerce Indicator (ECI). Not available for Mastercard and Amex. Returned for Visa only."
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "Expiry month."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "Expiry year."
          },
          "reason": {
            "$ref": "#/components/schemas/NetworkTokenError"
          }
        },
        "description": "Network token details."
      },
      "BulkDetokenizeRequest": {
        "required": [
          "requests"
        ],
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "description": "List of detokenization requests.",
            "items": {
              "$ref": "#/components/schemas/DetokenizeRequest"
            }
          }
        }
      },
      "CardDetokenizeRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "CARD"
          },
          "alias": {
            "type": "string",
            "description": "An alias received from a previous request.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt"
          },
          "networkTokenOptions": {
            "$ref": "#/components/schemas/DetokenizeNetworkTokenOptions"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/DetokenizeRequest"
          }
        ]
      },
      "CustomDetokenizeRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "CUSTOM"
          },
          "alias": {
            "type": "string",
            "description": "An alias received from a previous request.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/DetokenizeRequest"
          }
        ]
      },
      "CvvDetokenizeRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "CVV"
          },
          "alias": {
            "type": "string",
            "description": "A CVV alias received from a previous request. CVV aliases have a limited lifespan of 30 minutes and can't be detokenized anymore when expired.",
            "example": "oE9AUiL1S36de4oSVOkSaLVt"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/DetokenizeRequest"
          }
        ]
      },
      "DetokenizeNetworkTokenOptions": {
        "type": "object",
        "properties": {
          "returnNetworkToken": {
            "type": "boolean",
            "description": "Request network token info."
          },
          "returnCryptogram": {
            "type": "boolean",
            "description": "Request cryptogram info."
          }
        }
      },
      "DetokenizeRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CARD",
              "CVV",
              "CUSTOM",
              "PFC",
              "REK",
              "IBAN",
              "IBAN_ACCOUNT_NUMBER",
              "IBAN_BRANCH_CODE",
              "TWI",
              "KLN",
              "INT",
              "PAP",
              "ESY",
              "MFX",
              "MPX",
              "SWP",
              "MDP",
              "ALP",
              "PLU"
            ]
          }
        },
        "description": "List of detokenization requests.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "CARD": "#/components/schemas/CardDetokenizeRequest",
            "CVV": "#/components/schemas/CvvDetokenizeRequest",
            "CUSTOM": "#/components/schemas/CustomDetokenizeRequest"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CardDetokenizeRequest"
          },
          {
            "$ref": "#/components/schemas/CvvDetokenizeRequest"
          },
          {
            "$ref": "#/components/schemas/CustomDetokenizeRequest"
          }
        ]
      },
      "MultiCurrencyProcessingError": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/MultiCurrencyProcessingErrorCode"
          },
          "message": {
            "type": "string",
            "description": "A human readable message indicating what went wrong."
          }
        }
      },
      "MultiCurrencyProcessingErrorCode": {
        "type": "string",
        "enum": [
          "UNRECOGNIZED_PROPERTY",
          "INVALID_SETUP",
          "INVALID_STATE",
          "SERVER_ERROR",
          "UNAUTHORIZED",
          "INVALID_PROPERTY",
          "INVALID_HEADER",
          "CLIENT_ERROR",
          "INVALID_JSON_PAYLOAD",
          "UNKNOWN_ERROR",
          "FORBIDDEN"
        ]
      },
      "MultiCurrencyReportResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Id of the request"
          },
          "reportDetail": {
            "$ref": "#/components/schemas/ReportDetail"
          },
          "rates": {
            "type": "array",
            "description": "Multi currency processing rates",
            "items": {
              "$ref": "#/components/schemas/PlanetPaymentRate"
            }
          }
        }
      },
      "PlanetPaymentRate": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "xml": {
              "name": "Currency"
            }
          },
          "currencyCode": {
            "type": "string",
            "xml": {
              "name": "CurrencyCode"
            }
          },
          "decimalPlaces": {
            "type": "integer",
            "format": "int32",
            "xml": {
              "name": "DecimalPlaces"
            }
          },
          "roundUnit": {
            "type": "integer",
            "format": "int32",
            "xml": {
              "name": "RoundUnit"
            }
          },
          "value": {
            "type": "number",
            "format": "double",
            "xml": {
              "name": "Value"
            }
          }
        },
        "description": "Multi currency processing rates"
      },
      "ReportDetail": {
        "type": "object",
        "properties": {
          "transactionDate": {
            "type": "string",
            "description": "Date and time when report was requested",
            "format": "date-time"
          },
          "retrievalReferenceNumber": {
            "type": "string",
            "description": "Reference number of report retrieval"
          }
        },
        "description": "Report-detail of the multi currency processing rates"
      },
      "ReconciliationsError": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ReconciliationsErrorCode"
          },
          "message": {
            "type": "string",
            "description": "A human readable message indicating what went wrong."
          }
        }
      },
      "ReconciliationsErrorCode": {
        "type": "string",
        "enum": [
          "UNRECOGNIZED_PROPERTY",
          "INVALID_STATE",
          "SERVER_ERROR",
          "UNAUTHORIZED",
          "INVALID_PROPERTY",
          "INVALID_HEADER",
          "CLIENT_ERROR",
          "INVALID_JSON_PAYLOAD",
          "TRANSACTION_NOT_FOUND",
          "UNKNOWN_ERROR",
          "FORBIDDEN"
        ]
      },
      "SaleReportResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The transactionId received after an authorization."
          },
          "saleDate": {
            "type": "string",
            "description": "The date when the sale took place",
            "format": "date-time"
          },
          "reportedDate": {
            "type": "string",
            "description": "The date when the sale was reported.",
            "format": "date-time"
          },
          "matchResult": {
            "type": "string",
            "description": "The result after trying to match the reported sale.",
            "enum": [
              "NO_MATCH",
              "MATCHED",
              "CONFLICT",
              "ALREADY_MATCHED"
            ]
          }
        }
      },
      "SaleReportRequest": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The date when the transaction happened.",
            "format": "date-time"
          },
          "transactionId": {
            "type": "string",
            "description": "The transactionId received after an authorization."
          },
          "currency": {
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "description": "The type of the transaction",
            "enum": [
              "payment",
              "credit",
              "card_check"
            ]
          },
          "refno": {
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          }
        },
        "description": "A list of sale objects."
      },
      "BulkSaleReportRequest": {
        "type": "object",
        "properties": {
          "sales": {
            "type": "array",
            "description": "A list of sale objects.",
            "items": {
              "$ref": "#/components/schemas/SaleReportRequest"
            }
          }
        }
      },
      "Accertify": {
        "type": "object",
        "description": "Accertify decision (Accepted, Review, Declined"
      },
      "AuthorizeCardDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "masked": {
            "type": "string",
            "description": "Masked credit card number. Can be used to display on a users profile page. For example: `424242xxxxxx4242`"
          }
        },
        "description": "Details of the used card."
      },
      "AuthorizeError": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/TransactionsErrorCode"
          },
          "message": {
            "type": "string",
            "description": "A human readable message indicating what went wrong."
          },
          "start3DSecureUrl": {
            "type": "string"
          }
        }
      },
      "AuthorizeResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The transactionId to use for subsequent actions like settlement."
          },
          "acquirerAuthorizationCode": {
            "type": "string",
            "description": "The authorization code returned by the acquirer or payment method provider."
          },
          "card": {
            "$ref": "#/components/schemas/AuthorizeCardDetail"
          },
          "accertify": {
            "$ref": "#/components/schemas/Accertify"
          }
        }
      },
      "TransactionsErrorCode": {
        "type": "string",
        "enum": [
          "INVALID_SETUP",
          "EXPIRED_CARD",
          "CLIENT_ERROR",
          "INVALID_TRANSACTION_STATUS",
          "REFERRAL",
          "BLOCKED_CARD",
          "INVALID_CVV",
          "UNKNOWN_ERROR",
          "UNRECOGNIZED_PROPERTY",
          "SERVER_ERROR",
          "UNAUTHORIZED",
          "NOT_SUPPORTED_BY_THIRD_PARTY",
          "BLOCKED_BY_VELOCITY_CHECKER",
          "THIRD_PARTY_ERROR",
          "INVALID_JSON_PAYLOAD",
          "INVALID_SIGN",
          "UNSUPPORTED_CARD",
          "DECLINED",
          "FORBIDDEN",
          "INVALID_ALIAS",
          "INVALID_STATE",
          "UNSUPPORTED_PAYMENT_METHOD",
          "INVALID_PROPERTY",
          "INVALID_HEADER",
          "SOFT_DECLINED",
          "DUPLICATE_REFNO",
          "TRANSACTION_NOT_FOUND",
          "INVALID_CARD"
        ]
      },
      "TransactionsError": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/TransactionsErrorCode"
          },
          "message": {
            "type": "string",
            "description": "A human readable message indicating what went wrong."
          }
        }
      },
      "TransactionsResponseBase": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/TransactionsError"
          }
        }
      },
      "AccardaAttachment": {
        "type": "object",
        "properties": {
          "mimeType": {
            "type": "string",
            "description": "The mime type of the attachment"
          },
          "name": {
            "type": "string",
            "description": "The name of the attachment"
          },
          "value": {
            "type": "string",
            "description": "Base64 encoded value of the attachment"
          }
        },
        "description": "Base64 encoded attachment"
      },
      "AccardaRequest": {
        "required": [
          "mode"
        ],
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "Defines the type of the payment",
            "enum": [
              "invoice",
              "installment"
            ],
            "default": "invoice"
          },
          "installment": {
            "$ref": "#/components/schemas/Installment"
          },
          "channel": {
            "type": "string",
            "description": "The invoice channel",
            "enum": [
              "email",
              "print",
              "insurance",
              "merchant"
            ]
          },
          "streetSplit": {
            "type": "boolean",
            "description": "If `true` the value of `customer.street` will be split into street nameand street number",
            "default": false
          },
          "screeningOnly": {
            "type": "boolean",
            "description": "If `true` only a pre-screening request is done.",
            "default": false
          },
          "orderNumber": {
            "type": "string",
            "description": "Accarda reference number, mainly useful for B2B orders where the company doing the order might have their own ID to identify the invoice later on within their own systems."
          },
          "couponAmount": {
            "type": "integer",
            "description": "Amount in the basket payed by coupon or other payment instruments.",
            "format": "int32"
          },
          "attachments": {
            "type": "array",
            "description": "List of base64 encoded attachments",
            "items": {
              "$ref": "#/components/schemas/AccardaAttachment"
            }
          }
        },
        "description": "Accarda specific request parameters."
      },
      "AirlineDataRequest": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "description": "Passenger country code in <a href='https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2' target='_blank'>ISO-3166-1-alpha2</a> format."
          },
          "agentCode": {
            "maxLength": 8,
            "minLength": 1,
            "type": "string",
            "description": "IATA agency code"
          },
          "pnr": {
            "maxLength": 6,
            "minLength": 1,
            "type": "string",
            "description": "PNR"
          },
          "issueDate": {
            "type": "string",
            "description": "Ticket issuing date. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (`YYYY-MM-DD`).",
            "format": "date"
          },
          "tickets": {
            "type": "array",
            "description": "A list of tickets for this purchase. Note: PAP only supports one ticket.",
            "items": {
              "$ref": "#/components/schemas/Ticket"
            }
          }
        },
        "description": "The airline data including ticket details."
      },
      "AliasCard": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "ALIAS"
          },
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the credit card alias."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the credit card alias."
          },
          "3D": {
            "$ref": "#/components/schemas/EMVCo3DAuthenticationDataAuthorizeRequest"
          }
        },
        "description": "Alias card authorization",
        "allOf": [
          {
            "$ref": "#/components/schemas/Card"
          }
        ]
      },
      "AlipayRequest": {
        "type": "object",
        "properties": {
          "subtype": {
            "type": "string",
            "description": "The Alipay+ specific payment method used for the transaction.",
            "enum": [
              "MINI_APP"
            ]
          },
          "paymentMethodType": {
            "type": "string",
            "description": "The Alipay+ specific payment method type used for the transaction.",
            "enum": [
              "ALIPAY_CN",
              "TRUEMONEY",
              "ALIPAY_HK",
              "TNG",
              "GCASH",
              "DANA"
            ],
            "default": "ALIPAY_CN"
          },
          "appId": {
            "type": "string"
          }
        },
        "description": "Alipay+ specific parameters"
      },
      "ApplePayRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "Encrypted payment data."
          },
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "signature": {
            "type": "string",
            "description": "Signature of the payment and header data. The signature includes the signing certificate, its intermediate CA certificate, and information about the signing algorithm."
          },
          "version": {
            "type": "string",
            "description": "Version information about the payment token. The token uses `EC_v1` for ECC-encrypted data, and `RSA_v1` for RSA-encrypted data."
          }
        },
        "description": "The data received from Apple when integrating the 'Buy with Apple Pay' button. See https://developer.apple.com/documentation/apple_pay_on_the_web for more information."
      },
      "Article": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The article identifier."
          },
          "name": {
            "type": "string",
            "description": "The name of the article."
          },
          "description": {
            "type": "string",
            "description": "The description of the article."
          },
          "imageUrl": {
            "type": "string",
            "description": "A https URL to the image of the article. "
          },
          "price": {
            "type": "integer",
            "description": "The line item price including the VAT.",
            "format": "int64"
          },
          "priceGross": {
            "type": "integer",
            "description": "The article gross price including VAT.",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "description": "The number of similar articles on the current invoice line item.",
            "format": "int32"
          },
          "tax": {
            "type": "integer",
            "description": "This field is deprecated. Please use `taxAmount` for the tax amount and `taxPercent` for the tax rate.",
            "format": "int64",
            "deprecated": true
          },
          "taxPercent": {
            "type": "number",
            "description": "The tax rate in percent [%].",
            "format": "double"
          },
          "taxAmount": {
            "type": "integer",
            "description": "The tax amount in the currency’s smallest unit. For example use 1000 for CHF 10.00.",
            "format": "int64"
          },
          "priceWithoutVAT": {
            "type": "integer",
            "description": "The article price without VAT",
            "format": "int64"
          },
          "discount": {
            "type": "integer",
            "description": "The article discount.",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "description": "The type of the article. Possible values vary per payment method."
          }
        }
      },
      "AuthorizeMcpRequest": {
        "required": [
          "amount",
          "currency",
          "provider",
          "reasonIndicator",
          "userId"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The targeted currency"
          },
          "amount": {
            "type": "integer",
            "description": "The amount in your targeted currency",
            "format": "int64"
          },
          "conversionRate": {
            "type": "number",
            "description": "Conversion rate received from the currency rates endpoint. Required in case of dynamic MCP.",
            "format": "double"
          },
          "transactionDate": {
            "type": "string",
            "description": "Transaction datetime received from the currency rates endpoint",
            "format": "date-time"
          },
          "retrievalReferenceNumber": {
            "type": "string",
            "description": "RetrievalReferenceNumber received from the currency rates endpoint"
          },
          "userId": {
            "type": "string"
          },
          "provider": {
            "type": "string",
            "description": "The provider for multi currency processing"
          },
          "reasonIndicator": {
            "type": "string",
            "description": "If received from acquirer the reason indicator can be set"
          }
        }
      },
      "AuthorizeOptionRequest": {
        "type": "object",
        "properties": {
          "storeCustomerData": {
            "type": "boolean",
            "description": "If `true`, the values passed in the customer object are stored and visiblein the web admin tool on the transaction details. If `false`, no customer data will bestored.",
            "default": false
          }
        }
      },
      "AuthorizeRequest": {
        "required": [
          "amount",
          "currency",
          "refno"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "refno": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          },
          "refno2": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Optional customer's reference number. Supported by some payment methods or acquirers."
          },
          "autoSettle": {
            "type": "boolean",
            "description": "Whether to automatically settle the transaction after an authorization or not. If not present with the init request, the settings defined in the dashboard ('Authorisation / Settlement' or 'Direct Debit') will be used. Those settings will only be used for web transactions and not for server to server API calls."
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerRequest"
          },
          "billing": {
            "$ref": "#/components/schemas/BillingAddress"
          },
          "shipping": {
            "$ref": "#/components/schemas/ShippingAddress"
          },
          "order": {
            "$ref": "#/components/schemas/OrderRequest"
          },
          "card": {
            "$ref": "#/components/schemas/Card"
          },
          "BON": {
            "$ref": "#/components/schemas/BoncardRequest"
          },
          "PAP": {
            "$ref": "#/components/schemas/PayPalAuthorizeRequest"
          },
          "PFC": {
            "$ref": "#/components/schemas/PfcAuthorizeRequest"
          },
          "REK": {
            "$ref": "#/components/schemas/RekaRequest"
          },
          "KLN": {
            "$ref": "#/components/schemas/KlarnaAuthorizeRequest"
          },
          "TWI": {
            "$ref": "#/components/schemas/TwintAuthorizeRequest"
          },
          "INT": {
            "$ref": "#/components/schemas/ByjunoAuthorizeRequest"
          },
          "ALP": {
            "$ref": "#/components/schemas/AlipayRequest"
          },
          "ESY": {
            "$ref": "#/components/schemas/ESY"
          },
          "MFA": {
            "$ref": "#/components/schemas/MfaAuthorizeRequest"
          },
          "SWP": {
            "$ref": "#/components/schemas/SwissPassRequest"
          },
          "PLU": {
            "$ref": "#/components/schemas/SBBHalbtaxPlusAuthorizeRequest"
          },
          "airlineData": {
            "$ref": "#/components/schemas/AirlineDataRequest"
          },
          "accertify": {
            "$ref": "#/components/schemas/Accertify"
          },
          "threeRIData": {
            "$ref": "#/components/schemas/ThreeRIData"
          },
          "DVI": {
            "$ref": "#/components/schemas/DeltaVistaData"
          },
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          },
          "ACC": {
            "$ref": "#/components/schemas/AccardaRequest"
          },
          "PAY": {
            "$ref": "#/components/schemas/GooglePayRequest"
          },
          "APL": {
            "$ref": "#/components/schemas/ApplePayRequest"
          },
          "MPA": {
            "$ref": "#/components/schemas/MpaAuthorizeRequest"
          },
          "MPG": {
            "$ref": "#/components/schemas/MpgAuthorizeRequest"
          },
          "MFG": {
            "$ref": "#/components/schemas/MfgAuthorizeRequest"
          },
          "marketplace": {
            "$ref": "#/components/schemas/MarketPlaceAuthorize"
          },
          "ELV": {
            "$ref": "#/components/schemas/ElvRequest"
          },
          "SWB": {
            "$ref": "#/components/schemas/SwissBillingAuthorizeRequest"
          },
          "option": {
            "$ref": "#/components/schemas/AuthorizeOptionRequest"
          },
          "mcp": {
            "$ref": "#/components/schemas/AuthorizeMcpRequest"
          },
          "extensions": {
            "$ref": "#/components/schemas/Extension"
          },
          "3RI": {
            "$ref": "#/components/schemas/ThreeRI"
          }
        }
      },
      "BillingAddress": {
        "type": "object",
        "properties": {
          "gender": {
            "maxLength": 6,
            "pattern": "^([a-zA-Z]){2,6}$",
            "type": "string",
            "description": "Gender of the person"
          },
          "title": {
            "type": "string",
            "description": "Title of the person"
          },
          "name": {
            "type": "string",
            "description": "Name of the person"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the person"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the person"
          },
          "email": {
            "type": "string",
            "description": "Email of the person"
          },
          "street": {
            "type": "string",
            "description": "Street of the person"
          },
          "street2": {
            "type": "string",
            "description": "Secondary street name of the person"
          },
          "zipCode": {
            "type": "string",
            "description": "Postal code of the person"
          },
          "city": {
            "type": "string",
            "description": "City of the person"
          },
          "country": {
            "type": "string",
            "description": "<a href='https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3' target='_blank'>ISO 3166-1 alpha-3</a> country code of the person"
          },
          "countrySubdivision": {
            "type": "string",
            "description": "Country subdivision of the person"
          },
          "sortingCode": {
            "type": "string",
            "description": "The sorting code of the person"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number of the person"
          }
        }
      },
      "BoncardRequest": {
        "required": [
          "alias"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "cvv": {
            "type": "string"
          }
        },
        "description": "Boncard specific request parameters"
      },
      "ByjunoAuthorizeRequest": {
        "required": [
          "subtype"
        ],
        "type": "object",
        "properties": {
          "subtype": {
            "type": "string",
            "description": "The Byjuno specific payment method used for the transaction.",
            "enum": [
              "INVOICE",
              "INSTALLMENT",
              "BYJUNO-INVOICE",
              "MONTHLYINVOICE"
            ]
          },
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "customerEmailConfirmed": {
            "type": "boolean",
            "description": "Indicates that the customer has confirmed the email address to the merchant",
            "default": false
          },
          "customerInfo1": {
            "type": "string",
            "description": "Customer information for credit check."
          },
          "customerInfo2": {
            "type": "string",
            "description": "Customer information for credit check."
          },
          "deliveryMethod": {
            "type": "string",
            "description": "Can be one of POST (Delivery by Swiss Post), SHOP (Point of Sale) or HLD (Home Delivery Service)"
          },
          "deviceFingerprintId": {
            "type": "string",
            "description": "Identification of the customer in the shop"
          },
          "paperInvoice": {
            "type": "boolean",
            "description": "Whether or not to send a paper invoice."
          },
          "repaymentType": {
            "maximum": 20,
            "minimum": 0,
            "type": "integer",
            "description": "Number from 1 to 20 to indicate the repayment schedule. This is used in combination with payment methods and defined per client configuration.",
            "format": "int32"
          },
          "riskOwner": {
            "type": "string",
            "description": "Defines which party should take the risk.",
            "enum": [
              "IJ",
              "CLIENT"
            ]
          },
          "siteId": {
            "type": "string",
            "description": "Can be used in case when client operates different legally separated stores / points of sale."
          },
          "verifiedDocument1Type": {
            "type": "string",
            "description": "Indication if merchant is having verified documents from client request.",
            "enum": [
              "swiss-travel-pass",
              "other"
            ]
          },
          "verifiedDocument1Number": {
            "type": "string",
            "description": "Verified document number."
          },
          "verifiedDocument1Issuer": {
            "type": "string",
            "description": "Verified document issuer."
          },
          "customData": {
            "type": "array",
            "description": "A list of custom data fields. It can accept up to 10 entries.",
            "items": {
              "type": "string",
              "description": "A list of custom data fields. It can accept up to 10 entries."
            }
          },
          "firstRateAmount": {
            "type": "integer",
            "description": "Amount of the first rate paid by the customer.",
            "format": "int32"
          }
        }
      },
      "Card": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "PLAIN": "#/components/schemas/PlainCard",
            "ALIAS": "#/components/schemas/AliasCard",
            "NETWORK_TOKEN": "#/components/schemas/NetworkTokenCard",
            "DEVICE_TOKEN": "#/components/schemas/DeviceTokenCard"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PlainCard"
          },
          {
            "$ref": "#/components/schemas/AliasCard"
          },
          {
            "$ref": "#/components/schemas/NetworkTokenCard"
          },
          {
            "$ref": "#/components/schemas/DeviceTokenCard"
          }
        ]
      },
      "CustomerRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique customer identifier"
          },
          "title": {
            "type": "string",
            "description": "Something like `Ms` or `Mrs`"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the customer."
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the customer."
          },
          "street": {
            "type": "string",
            "description": "The street of the customer."
          },
          "street2": {
            "type": "string",
            "description": "Additional street information. For example: '3rd floor'"
          },
          "city": {
            "type": "string",
            "description": "The city of the customer."
          },
          "country": {
            "type": "string",
            "description": "2 letter ISO 3166-1 alpha-2 country code"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip code of the customer."
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the customer."
          },
          "cellPhone": {
            "type": "string",
            "description": "Cell Phone number of the customer."
          },
          "email": {
            "type": "string",
            "description": "The email address of the customer."
          },
          "gender": {
            "type": "string",
            "description": "Gender of the customer. `female` or `male`."
          },
          "birthDate": {
            "type": "string",
            "description": "The birth date of the customer. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (`YYYY-MM-DD`).",
            "format": "date"
          },
          "language": {
            "type": "string",
            "description": "The language of the customer."
          },
          "type": {
            "type": "string",
            "description": "`P` or `C` depending on whether the customer is private or a company.\nIf `C`, the fields `name` and `companyRegisterNumber` are required"
          },
          "name": {
            "type": "string",
            "description": "The name of the company. Only applicable if `type=C`"
          },
          "companyLegalForm": {
            "type": "string",
            "description": "The legal form of the company (AG, GmbH, ...)"
          },
          "companyRegisterNumber": {
            "type": "string",
            "description": "The register number of the company. Only applicable if `type=C`"
          },
          "ipAddress": {
            "type": "string",
            "description": "The ip address of the customer."
          }
        },
        "description": "Whenever the payment method supports `customer` details, the customer object can be used. If a particular field is required varies from payment method to payment method. For example the field `birthDate` is not mandatory for each payment method supporting the `customer` object."
      },
      "DeltaVistaData": {
        "type": "object",
        "description": "DVI has no specific request parameters but we need an empty object here to handle it as a DVI request."
      },
      "DeviceTokenCard": {
        "required": [
          "expiryMonth",
          "expiryYear",
          "token",
          "tokenType",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "DEVICE_TOKEN"
          },
          "token": {
            "type": "string",
            "description": "Device token value."
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the network token."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the network token."
          },
          "tokenType": {
            "type": "string",
            "description": "The scheme which issued the network token.",
            "enum": [
              "APPLE_PAY",
              "GOOGLE_PAY",
              "SAMSUNG_PAY"
            ]
          },
          "cryptogram": {
            "type": "string",
            "description": "The cryptogram of the token"
          },
          "eci": {
            "type": "string",
            "description": "the Eci of the token"
          }
        },
        "description": "Device token authorization",
        "allOf": [
          {
            "$ref": "#/components/schemas/Card"
          }
        ]
      },
      "EMVCo3DAuthenticationDataAuthorizeRequest": {
        "type": "object",
        "properties": {
          "eci": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The Electronic Commerce Indicator",
            "enum": [
              "01",
              "02",
              "05",
              "06",
              "07"
            ]
          },
          "xid": {
            "type": "string",
            "description": "The transaction ID returned by the directory server"
          },
          "threeDSTransactionId": {
            "type": "string",
            "description": "The transaction ID returned by the 3D Secure Provider"
          },
          "cavv": {
            "type": "string",
            "description": "The Cardholder Authentication Verification Value"
          },
          "threeDSVersion": {
            "type": "string",
            "description": "The 3D version"
          },
          "cavvAlgorithm": {
            "type": "string",
            "description": "The 3D algorithm"
          },
          "directoryResponse": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Transaction status after `ARes`\n\n|Value|3Dv1|3Dv2|\n|:---|:---|:---|\n|Y| enrolled| authenticated|\n|N| not enrolled| authentication failed|\n|U| not available| not available|\n|C| |challenge needed|\n|R| |rejected|\n|A| |authentication attempt|\n\n",
            "enum": [
              "Y",
              "N",
              "U",
              "C",
              "R",
              "A"
            ]
          },
          "authenticationResponse": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Transaction status after `RReq` (Challenge flow)\n\n|Value|3Dv1|3Dv2|\n|:---|:---|:---|\n|Y| authenticated| authenticated|\n|N| authentication failed| authentication failed|\n|U| not available| not available|\n|A| authentication attempt| authentication attempt|\n|C| process incomplete| process incomplete|\n|D| not enrolled| |\n\n",
            "enum": [
              "Y",
              "N",
              "U",
              "A",
              "C",
              "D"
            ]
          },
          "transStatusReason": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "Transaction status reason\n\n|Value|Description|\n|:---|:---|\n|01| Card authentication failed|\n|02| Unknown Device|\n|03| Unsupported Device|\n|04| Exceeds authentication frequency limit|\n|05| Expired card|\n|06| Invalid card number|\n|07| Invalid transaction|\n|08| No Card record|\n|09| Security failure|\n|10| Stolen card|\n|11| Suspected fraud|\n|12| Transaction not permitted to cardholder|\n|13| Cardholder not enrolled in service|\n|14| Transaction timed out at the ACS|\n|15| Low confidence|\n|16| Medium confidence|\n|17| High confidence|\n|18| Very High confidence|\n|19| Exceeds ACS maximum challenges|\n|20| Non-Payment transaction not supported|\n|21| 3RI transaction not supported|\n|22| ACS technical issue|\n|23| Decoupled Authentication required by ACS but not requested by 3DS Requestor|\n|24| 3DS Requestor Decoupled Max Expiry Time exceeded|\n|25| Decoupled Authentication was provided insufficient time to authenticate cardholder. ACS will not make attempt|\n|26| Authentication attempted but not performed by the cardholder|\n|27–79| Reserved for EMVCo future use (values invalid until defined by EMVCo)|\n|80–99 | Reserved for DS use|\n"
          }
        },
        "description": "If 3D authentication data is available, the `3D` object can be used to send the relevant 3D parameters. Please get in contact with us if you have a dedicated 3D provider."
      },
      "ESY": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "description": {
            "type": "string",
            "description": "A description of the purchase."
          },
          "paymentInfo": {
            "type": "string",
            "description": "The payment info of the service (also known as billing text). NOTE: The paymentInfo will be placed on the end user invoice bill."
          },
          "title": {
            "type": "string",
            "description": "The title on top of the Swisscom Pay Payment Page."
          }
        }
      },
      "ElvRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "iban": {
            "type": "string"
          }
        },
        "description": "ELV specific request parameters."
      },
      "Extension": {
        "type": "object",
        "description": "An object for additional data for customized processes."
      },
      "GooglePayRequest": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "description": "Verifies that the message came from Google. It's Base64-encoded, and created with ECDSA by the intermediate signing key."
          },
          "protocolVersion": {
            "type": "string",
            "description": "Identifies the encryption or signing scheme under which the message was created. It allows the protocol to evolve over time, if needed."
          },
          "signedMessage": {
            "type": "string",
            "description": "A JSON object serialized as a string that contains the encryptedMessage, ephemeralPublicKey, and tag. It's serialized to simplify the signature verification process."
          },
          "intermediateSigningKey": {
            "$ref": "#/components/schemas/IntermediateSigningKey"
          }
        },
        "description": "The data received from Google when integrating the 'Buy with Google Pay' button. See https://github.com/datatrans/google-pay-web-sample for more information."
      },
      "Header": {
        "type": "object",
        "properties": {
          "publicKeyHash": {
            "type": "string",
            "description": "Hash of the X.509 encoded public key bytes of the merchant’s certificate."
          },
          "ephemeralPublicKey": {
            "type": "string",
            "description": "Ephemeral public key bytes. `EC_v1` only."
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction identifier, generated on the device."
          }
        },
        "description": "Additional version-dependent information used to decrypt and verify the payment."
      },
      "Installment": {
        "type": "object",
        "properties": {
          "rate": {
            "type": "string",
            "description": "The preferred rate model of the installment",
            "enum": [
              "3x3",
              "4x12",
              "12x12"
            ]
          }
        },
        "description": "If `mode` equals `installment` this object defines the rate model of it"
      },
      "IntermediateSigningKey": {
        "type": "object",
        "properties": {
          "signedKey": {
            "type": "string"
          },
          "signatures": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "description": "A JSON object that contains the intermediate signing key from Google. It contains the signedKey with keyValue, keyExpiration, and signatures. It's serialized to simplify the intermediate signing key signature verification process."
      },
      "KlarnaAddress": {
        "type": "object",
        "properties": {
          "streetAddress": {
            "type": "string",
            "description": "The street name and number"
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code"
          },
          "city": {
            "type": "string",
            "description": "The name of the city"
          },
          "country": {
            "type": "string",
            "description": "The name of the country"
          }
        }
      },
      "KlarnaArena": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the venue"
          },
          "street": {
            "type": "string",
            "description": "The street of the arena location"
          },
          "zipCode": {
            "type": "string",
            "description": "The postal code of the arena location"
          },
          "city": {
            "type": "string",
            "description": "The city of the arena location"
          },
          "country": {
            "type": "string",
            "description": "The country of the arena location"
          }
        }
      },
      "KlarnaAuthorizeRequest": {
        "required": [
          "alias"
        ],
        "type": "object",
        "properties": {
          "subPaymentMethod": {
            "type": "string",
            "description": "The Klarna specific payment method used for the transaction.",
            "enum": [
              "pay_now",
              "pay_later",
              "pay_over_time",
              "direct_debit",
              "direct_bank_transfer"
            ]
          },
          "events": {
            "type": "array",
            "description": "A list of Klarna events.",
            "items": {
              "$ref": "#/components/schemas/KlarnaEvent"
            }
          },
          "subscriptions": {
            "type": "array",
            "description": "A list of Klarna subscriptions.",
            "items": {
              "$ref": "#/components/schemas/KlarnaSubscription"
            }
          },
          "accountInfos": {
            "type": "array",
            "description": "A list of Klarna customer account infos.",
            "items": {
              "$ref": "#/components/schemas/KlarnaCustomerAccountInfo"
            }
          },
          "historySimple": {
            "type": "array",
            "description": "A list of simple history entries",
            "items": {
              "$ref": "#/components/schemas/KlarnaPaymentHistorySimple"
            }
          },
          "historyFull": {
            "type": "array",
            "description": "A list of full history entries",
            "items": {
              "$ref": "#/components/schemas/KlarnaPaymentHistoryFull"
            }
          },
          "hotelReservationDetails": {
            "type": "array",
            "description": "A list of hotel reservation details",
            "items": {
              "$ref": "#/components/schemas/KlarnaHotelReservationDetail"
            }
          },
          "trainReservationDetails": {
            "type": "array",
            "description": "A list of train reservation details",
            "items": {
              "$ref": "#/components/schemas/KlarnaTrainReservationDetail"
            }
          },
          "ferryReservationDetails": {
            "type": "array",
            "description": "A list of ferry reservation details",
            "items": {
              "$ref": "#/components/schemas/KlarnaFerryReservationDetail"
            }
          },
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        }
      },
      "KlarnaCustomerAccountInfo": {
        "type": "object",
        "properties": {
          "uniqueIdentifier": {
            "type": "string",
            "description": "A unique name or number to identify the specific customer account. Max. 24 characters."
          },
          "registrationDate": {
            "type": "string",
            "description": "The registration date and time of the account. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "lastModified": {
            "type": "string",
            "description": "The date and time the account was modified the last time. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          }
        },
        "description": "A list of Klarna customer account infos."
      },
      "KlarnaEvent": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the event."
          },
          "company": {
            "type": "string",
            "description": "The name of the company arranging the event."
          },
          "genre": {
            "type": "string",
            "description": "The genre of the event."
          },
          "arena": {
            "$ref": "#/components/schemas/KlarnaArena"
          },
          "start": {
            "type": "string",
            "description": "The start date and time of the event. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "The end date and time of the event. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "accessControlledVenue": {
            "type": "boolean",
            "description": "Tickets are digitally checked when entering the venue."
          },
          "ticketDeliveryMethod": {
            "type": "string",
            "description": "The ticket delivery method.",
            "enum": [
              "PICK_UP",
              "EMAIL",
              "POST",
              "PHONE"
            ]
          },
          "ticketDeliveryRecipient": {
            "type": "string",
            "description": "The name of the recipient the ticket is delivered to. If the method isEMAIL or PHONE, use either the email address or the phone number."
          },
          "affiliateName": {
            "type": "string",
            "description": "The name of the affiliate that originated the purchase."
          }
        },
        "description": "A Klarna event."
      },
      "KlarnaFerryInsurance": {
        "type": "object",
        "properties": {
          "insuranceCompany": {
            "type": "string"
          },
          "insuranceType": {
            "type": "string",
            "enum": [
              "cancellation",
              "travel",
              "cancellation_travel",
              "bankruptcy"
            ]
          },
          "insurancePrice": {
            "type": "number",
            "description": "Local currency",
            "format": "double"
          }
        },
        "description": "Insurance data"
      },
      "KlarnaFerryItinerary": {
        "type": "object",
        "properties": {
          "departure": {
            "type": "string",
            "description": "City code or name"
          },
          "departureCity": {
            "type": "string"
          },
          "arrival": {
            "type": "string",
            "description": "City code or name"
          },
          "arrivalCity": {
            "type": "string"
          },
          "carrier": {
            "type": "string",
            "description": "Name of transportation company"
          },
          "segmentPrice": {
            "type": "integer",
            "description": "Local currency",
            "format": "int32"
          },
          "departureDate": {
            "type": "string",
            "description": "Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "ticketDeliveryMethod": {
            "type": "string",
            "enum": [
              "pick_up",
              "email",
              "post",
              "phone"
            ]
          },
          "ticketDeliveryRecipient": {
            "type": "string",
            "description": "The name of the recipient the ticket is delivered to. If email or phone, then use either the email address or the phone number."
          },
          "passengerId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "class": {
            "type": "string"
          }
        },
        "description": "Ferry itinerary data, one per ferry ride"
      },
      "KlarnaFerryPassenger": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "description": "Mr, Mrs, Ms or blank if under 12 years",
            "enum": [
              "mr",
              "mrs",
              "ms",
              ""
            ]
          },
          "firstName": {
            "type": "string",
            "description": "First name of the passenger"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the passenger"
          }
        },
        "description": "Passengers data"
      },
      "KlarnaFerryReservationDetail": {
        "type": "object",
        "properties": {
          "pnr": {
            "type": "string",
            "description": "Trip booking number, e.g. VH67899"
          },
          "ferryItinerary": {
            "type": "array",
            "description": "Ferry itinerary data, one per ferry ride",
            "items": {
              "$ref": "#/components/schemas/KlarnaFerryItinerary"
            }
          },
          "insurance": {
            "type": "array",
            "description": "Insurance data",
            "items": {
              "$ref": "#/components/schemas/KlarnaFerryInsurance"
            }
          },
          "passengers": {
            "type": "array",
            "description": "Passengers data",
            "items": {
              "$ref": "#/components/schemas/KlarnaFerryPassenger"
            }
          },
          "affiliateName": {
            "type": "string",
            "description": "Name of the affiliate that originated the purchase. If none, leave blank."
          }
        },
        "description": "A list of ferry reservation details"
      },
      "KlarnaHotelItinerary": {
        "type": "object",
        "properties": {
          "hotelName": {
            "type": "string",
            "description": "Name of hotel"
          },
          "address": {
            "$ref": "#/components/schemas/KlarnaAddress"
          },
          "startTime": {
            "type": "string",
            "description": "The start date and time of the reservation. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "The end date and time of the reservation. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "numberOfRooms": {
            "type": "integer",
            "format": "int32"
          },
          "passengerId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ticketDeliveryMethod": {
            "type": "string",
            "enum": [
              "pick_up",
              "email",
              "post",
              "phone"
            ]
          },
          "ticketDeliveryRecipient": {
            "type": "string",
            "description": "The name of the recipient the ticket is delivered to. If email or phone, then use either the email address or the phone number."
          },
          "hotelPrice": {
            "type": "number",
            "description": "Local currency"
          },
          "class": {
            "type": "string"
          }
        },
        "description": "Hotel itinerary data, one per hotel stay"
      },
      "KlarnaHotelReservationDetail": {
        "type": "object",
        "properties": {
          "pnr": {
            "type": "string",
            "description": "Trip booking number, e.g. VH67899"
          },
          "hotelItinerary": {
            "type": "array",
            "description": "Hotel itinerary data, one per hotel stay",
            "items": {
              "$ref": "#/components/schemas/KlarnaHotelItinerary"
            }
          },
          "insurance": {
            "type": "array",
            "description": "Insurance data",
            "items": {
              "$ref": "#/components/schemas/KlarnaInsurance"
            }
          },
          "passengers": {
            "type": "array",
            "description": "Passenger data",
            "items": {
              "$ref": "#/components/schemas/KlarnaPassenger"
            }
          },
          "affiliateName": {
            "type": "string",
            "description": "Name of the affiliate that originated the purchase. If none, leave blank."
          }
        },
        "description": "A list of hotel reservation details"
      },
      "KlarnaInsurance": {
        "type": "object",
        "properties": {
          "insuranceCompany": {
            "type": "string"
          },
          "insuranceType": {
            "type": "string",
            "enum": [
              "cancellation",
              "travel",
              "cancellation_travel",
              "bankruptcy"
            ]
          },
          "insurancePrice": {
            "type": "number",
            "format": "double"
          }
        },
        "description": "Insurance data"
      },
      "KlarnaPassenger": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "description": "Mr, Mrs, Ms or blank if under 12 years",
            "enum": [
              "MR",
              "MRS",
              "MS"
            ]
          },
          "firstName": {
            "type": "string",
            "description": "First name of the passenger"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the passenger"
          }
        },
        "description": "Passenger data"
      },
      "KlarnaPaymentHistoryFull": {
        "type": "object",
        "properties": {
          "uniqueIdentifier": {
            "type": "string",
            "description": "Unique name or number to identify the specific customer account. Max. 24 characters."
          },
          "paymentOption": {
            "type": "string",
            "description": "The type of the line item",
            "enum": [
              "CARD",
              "DIRECT_BANKING",
              "NON_KLARNA",
              "CREDIT",
              "SMS",
              "OTHER"
            ]
          },
          "paidPurchases": {
            "type": "integer",
            "description": "The total number of successful purchases.",
            "format": "int32"
          },
          "totalAmountPaidPurchases": {
            "type": "number",
            "description": "The total amount of successful purchases (in local currency).",
            "format": "double"
          },
          "lastPaidPurchase": {
            "type": "string",
            "description": "The date and time of the last paid purchase. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "firstPaidPurchase": {
            "type": "string",
            "description": "The date and time of the first paid purchase. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          }
        },
        "description": "A list of full history entries"
      },
      "KlarnaPaymentHistorySimple": {
        "type": "object",
        "properties": {
          "uniqueIdentifier": {
            "type": "string",
            "description": "Unique name or number to identify the specific customer account. Max. 24 characters."
          },
          "paidBefore": {
            "type": "boolean",
            "description": "Whether the customer has paid before or not."
          }
        },
        "description": "A list of simple history entries"
      },
      "KlarnaSubscription": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the product of the subscription"
          },
          "start": {
            "type": "string",
            "description": "The start date and time of the subscription. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "The end date and time of the subscription. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "autoRenewal": {
            "type": "boolean",
            "description": "`true` if the subscription will be auto renewed upon expiry."
          },
          "affiliateName": {
            "type": "string",
            "description": "The name of the affiliate that originated the purchase."
          }
        },
        "description": "A list of Klarna subscriptions."
      },
      "KlarnaTrainInsurance": {
        "type": "object",
        "properties": {
          "insuranceCompany": {
            "type": "string"
          },
          "insuranceType": {
            "type": "string",
            "enum": [
              "cancellation",
              "travel",
              "cancellation_travel",
              "bankruptcy"
            ]
          },
          "insurancePrice": {
            "type": "number",
            "format": "double"
          }
        },
        "description": "Insurance data"
      },
      "KlarnaTrainItinerary": {
        "type": "object",
        "properties": {
          "departure": {
            "type": "string",
            "description": "City code or name"
          },
          "departureCity": {
            "type": "string"
          },
          "arrival": {
            "type": "string",
            "description": "City code or name"
          },
          "arrivalCity": {
            "type": "string"
          },
          "carrier": {
            "type": "string",
            "description": "Name of transportation company"
          },
          "segmentPrice": {
            "type": "integer",
            "description": "Local currency",
            "format": "int32"
          },
          "departureDate": {
            "type": "string",
            "description": "Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "passengerId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ticketDeliveryMethod": {
            "type": "string",
            "enum": [
              "pick_up",
              "email",
              "post",
              "phone"
            ]
          },
          "ticketDeliveryRecipient": {
            "type": "string",
            "description": "The name of the recipient the ticket is delivered to. If email or phone, then use either the email address or the phone number."
          },
          "class": {
            "type": "string"
          }
        },
        "description": "Train itinerary data, one per train ride"
      },
      "KlarnaTrainPassenger": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "description": "Mr, Mrs, Ms or blank if under 12 years",
            "enum": [
              "MR",
              "MRS",
              "MS"
            ]
          },
          "firstName": {
            "type": "string",
            "description": "First name of the passenger"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the passenger"
          }
        },
        "description": "Passenger data"
      },
      "KlarnaTrainReservationDetail": {
        "type": "object",
        "properties": {
          "pnr": {
            "type": "string",
            "description": "Trip booking number, e.g. VH67899"
          },
          "trainItinerary": {
            "type": "array",
            "description": "Train itinerary data, one per train ride",
            "items": {
              "$ref": "#/components/schemas/KlarnaTrainItinerary"
            }
          },
          "insurance": {
            "type": "array",
            "description": "Insurance data",
            "items": {
              "$ref": "#/components/schemas/KlarnaTrainInsurance"
            }
          },
          "passengers": {
            "type": "array",
            "description": "Passenger data",
            "items": {
              "$ref": "#/components/schemas/KlarnaTrainPassenger"
            }
          },
          "affiliateName": {
            "type": "string",
            "description": "Name of the affiliate that originated the purchase. If none, leave blank."
          }
        },
        "description": "A list of train reservation details"
      },
      "Leg": {
        "type": "object",
        "properties": {
          "departureAirport": {
            "maxLength": 5,
            "minLength": 1,
            "type": "string",
            "description": "The origin or departure airport code for this leg."
          },
          "arrivalAirport": {
            "maxLength": 5,
            "minLength": 1,
            "type": "string",
            "description": "The destination or arrival airport code for this leg."
          },
          "carrier": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Carrier airline code(i.e.'OS')"
          },
          "fareBasis": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Fare  basis (i.e. 'URRVP/OCF')"
          },
          "flightNumber": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Flight number (i.e. OS 834)"
          },
          "flightDate": {
            "type": "string",
            "description": "Date of flight. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (`YYYY-MM-DD`).",
            "format": "date"
          },
          "departureTime": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "arrivalTime": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "class": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Class code (i.e.'U')"
          }
        },
        "description": "List of ticket's legs"
      },
      "LocalTime": {
        "type": "object",
        "properties": {
          "hour": {
            "type": "integer",
            "format": "int32"
          },
          "minute": {
            "type": "integer",
            "format": "int32"
          },
          "second": {
            "type": "integer",
            "format": "int32"
          },
          "nano": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Flight's arrival time. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (`hh:mm`)."
      },
      "MarketPlaceAuthorize": {
        "required": [
          "splits"
        ],
        "type": "object",
        "properties": {
          "splits": {
            "type": "array",
            "description": "The marketplace splits",
            "items": {
              "$ref": "#/components/schemas/MarketPlaceSplit"
            }
          }
        }
      },
      "MarketPlaceSplit": {
        "type": "object",
        "properties": {
          "subMerchantId": {
            "type": "string",
            "description": "Your sub-merchant's ID. This value is specified by your collector."
          },
          "amount": {
            "type": "integer",
            "description": "The share of the transaction that you want to be transferred to / from a sub-merchant's account in the currency's smallest unit. For example use 1000 for CHF 10.00. The amount cannot be 0. The sum of all split amounts have to match the transaction amount.",
            "format": "int64"
          },
          "commission": {
            "type": "integer",
            "description": "Your marketplace commission in the currency's smallest unit. For example use 1000 for CHF 10.00. The commission will always be deducted from the split amount and can therefore not be higher than the split amount. For settlements, the commission will be deducted from the amount to be paid out to the sub-merchant and credited to your marketplace account. For refunds, the commission will be deducted from the amount to be debited from the sub-merchant and debited instead from your marketplace account.",
            "format": "int64"
          }
        },
        "description": "The marketplace splits"
      },
      "MfaAuthorizeRequest": {
        "type": "object",
        "properties": {
          "paycard": {
            "type": "string",
            "description": "The paycard number if available."
          }
        },
        "description": "MFA specific parameters. At least an empty MFA object is required if MFA should be processed. Even if no additional parameters are sent."
      },
      "MfgAuthorizeRequest": {
        "required": [
          "virtualCard"
        ],
        "type": "object",
        "properties": {
          "virtualCard": {
            "type": "string",
            "description": "The virtual card received from a previous MFA request."
          },
          "invoiceOnDelivery": {
            "type": "boolean",
            "description": "If set to `true`, The customers bank details (ESR data) are available from the Status API"
          }
        },
        "description": "MFG specific parameters."
      },
      "MpaAuthorizeRequest": {
        "type": "object",
        "properties": {
          "paycard": {
            "type": "string",
            "description": "The paycard number if available."
          }
        },
        "description": "MPA specific parameters. At least an empty MPA object is required if MPA should be processed. Even if no additional parameters are sent."
      },
      "MpgAuthorizeRequest": {
        "required": [
          "virtualCard"
        ],
        "type": "object",
        "properties": {
          "virtualCard": {
            "type": "string",
            "description": "The virtual card received from a previous MPA request."
          },
          "invoiceOnDelivery": {
            "type": "boolean",
            "description": "If set to `true`, The customers bank details (ESR data) are available from the Status API"
          }
        },
        "description": "MPG specific parameters."
      },
      "NetworkToken3DAuthenticationData": {
        "type": "object",
        "properties": {
          "eci": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The Electronic Commerce Indicator",
            "enum": [
              "01",
              "02",
              "05",
              "06",
              "07"
            ]
          }
        },
        "description": "If 3D authentication data is available, the `3D` object can be used to send the relevant 3D parameters. Please get in contact with us if you have a dedicated 3D provider."
      },
      "NetworkTokenCard": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "NETWORK_TOKEN"
          },
          "token": {
            "type": "string",
            "description": "Network token value."
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the network token."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the network token."
          },
          "tokenType": {
            "type": "string",
            "description": "The scheme which issued the network token.",
            "enum": [
              "VISA",
              "MASTERCARD"
            ]
          },
          "cryptogram": {
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The cryptogram needed for the network token authorization."
          },
          "3D": {
            "$ref": "#/components/schemas/NetworkToken3DAuthenticationData"
          }
        },
        "description": "Network token authorization",
        "allOf": [
          {
            "$ref": "#/components/schemas/Card"
          }
        ]
      },
      "OrderRequest": {
        "type": "object",
        "properties": {
          "articles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Article"
            }
          },
          "taxAmount": {
            "type": "integer",
            "format": "int64"
          },
          "shippingAmount": {
            "type": "integer",
            "format": "int64"
          },
          "discountAmount": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "If supported by the payment method, an order with one or more articles can be defined."
      },
      "PayPalAuthorizeRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "orderTransactionId": {
            "type": "string",
            "description": "The transactionId of the order request executed previously, if this authorization is part of the order-authorize-capture (AC2) flow."
          },
          "fraudSessionId": {
            "type": "string",
            "description": "The PayPal FraudNet session identifier as specified in the API documentation.",
            "externalDocs": {
              "url": "https://developer.paypal.com/docs/limited-release/fraudnet/integrate/add-parameter-block/"
            }
          }
        }
      },
      "PfcAuthorizeRequest": {
        "required": [
          "alias"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        }
      },
      "PlainCard": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "PLAIN"
          },
          "number": {
            "type": "string",
            "description": "Merchants that have the option to store card information on their end can use the `number` property instead of `alias`. Please note that this option is only available to merchants that fulfill the requirements by PCI DSS to store sensitive information on their side and only upon request.",
            "example": "4242424242424242"
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the credit card."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the credit card."
          },
          "3D": {
            "$ref": "#/components/schemas/EMVCo3DAuthenticationDataAuthorizeRequest"
          }
        },
        "description": "Plain card authorization",
        "allOf": [
          {
            "$ref": "#/components/schemas/Card"
          }
        ]
      },
      "RekaRequest": {
        "required": [
          "alias"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the Reka card alias."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the Reka card alias"
          }
        },
        "description": "Reka card specific parameters"
      },
      "SBBHalbtaxPlusAuthorizeRequest": {
        "required": [
          "alias"
        ],
        "type": "object",
        "properties": {
          "reserved": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "pointOfSale": {
            "type": "integer",
            "format": "int32"
          },
          "pointOfDistribution": {
            "type": "integer",
            "format": "int32"
          },
          "novaTransactionID": {
            "type": "string"
          },
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        }
      },
      "ShippingAddress": {
        "type": "object",
        "properties": {
          "gender": {
            "maxLength": 6,
            "pattern": "^([a-zA-Z]){2,6}$",
            "type": "string",
            "description": "Gender of the person"
          },
          "title": {
            "type": "string",
            "description": "Title of the person"
          },
          "name": {
            "type": "string",
            "description": "Name of the person"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the person"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the person"
          },
          "email": {
            "type": "string",
            "description": "Email of the person"
          },
          "street": {
            "type": "string",
            "description": "Street of the person"
          },
          "street2": {
            "type": "string",
            "description": "Secondary street name of the person"
          },
          "zipCode": {
            "type": "string",
            "description": "Postal code of the person"
          },
          "city": {
            "type": "string",
            "description": "City of the person"
          },
          "country": {
            "type": "string",
            "description": "<a href='https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3' target='_blank'>ISO 3166-1 alpha-3</a> country code of the person"
          },
          "countrySubdivision": {
            "type": "string",
            "description": "Country subdivision of the person"
          },
          "sortingCode": {
            "type": "string",
            "description": "The sorting code of the person"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the person"
          },
          "cellPhone": {
            "type": "string",
            "description": "Cell phone number of the person"
          },
          "carrier": {
            "type": "string",
            "description": "Shipping carrier to be used. For example: `DHL`, `Express`"
          },
          "price": {
            "type": "integer",
            "description": "Value of all items in the basket, in smallest available unit.",
            "format": "int64"
          },
          "priceGross": {
            "type": "integer",
            "description": "Gross value of all items in the basket, in smallest available unit.",
            "format": "int64"
          }
        },
        "description": "The address where the article(s) should be sent to."
      },
      "SwissBillingAuthorizeRequest": {
        "required": [
          "customerSubscription"
        ],
        "type": "object",
        "properties": {
          "paymentPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "customerSubscription": {
            "type": "string"
          }
        }
      },
      "SwissPassRequest": {
        "required": [
          "alias"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "card": {
            "type": "string",
            "description": "The card number."
          },
          "zip": {
            "type": "string",
            "description": "The zip code."
          }
        },
        "description": "SwissPass specific parameters"
      },
      "ThreeRI": {
        "type": "object",
        "properties": {
          "originalTransactionId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "3RI specific parameters"
      },
      "ThreeRIData": {
        "type": "object",
        "properties": {
          "recurringExpiry": {
            "type": "string",
            "format": "date-time"
          },
          "recurringFrequency": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Ticket": {
        "type": "object",
        "properties": {
          "ticketNumber": {
            "type": "string",
            "description": "the number of the ticket"
          },
          "passengerName": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "Name of passenger or person to whom the ticket was issued"
          },
          "descriptionCode": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Description code"
          },
          "legs": {
            "type": "array",
            "description": "List of ticket's legs",
            "items": {
              "$ref": "#/components/schemas/Leg"
            }
          }
        },
        "description": "A list of tickets for this purchase. Note: PAP only supports one ticket."
      },
      "TwintAuthorizeRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "orderDetailsUrl": {
            "type": "string",
            "description": "URL to the order details page, where the merchant displays a summary of the order and/or allows other functionality that is relevant for the use case."
          },
          "messageTypeIdValidityHours": {
            "type": "integer",
            "description": "Number of hours that messageTypeId (the Spotlight Message identifier provided by TWINT) will be valid. Spotlight message will be displayed during these validity hours.",
            "format": "int32"
          }
        }
      },
      "AuthorizeSplitError": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/TransactionsErrorCode"
          },
          "message": {
            "type": "string",
            "description": "A human readable message indicating what went wrong."
          }
        }
      },
      "AuthorizeSplitResponse": {
        "type": "object",
        "properties": {
          "acquirerAuthorizationCode": {
            "type": "string",
            "description": "The authorization code returned by the acquirer or payment method provider."
          }
        }
      },
      "AuthorizeSplitRequest": {
        "required": [
          "refno"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          },
          "refno": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          },
          "refno2": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Optional customer's reference number. Supported by some payment methods or acquirers."
          },
          "autoSettle": {
            "type": "boolean",
            "description": "Whether to automatically settle the transaction after an authorization or not. If not present with the init request, the settings defined in the dashboard ('Authorisation / Settlement' or 'Direct Debit') will be used. Those settings will only be used for web transactions and not for server to server API calls."
          },
          "CDM": {
            "$ref": "#/components/schemas/CDMRequest"
          },
          "airlineData": {
            "$ref": "#/components/schemas/AirlineDataRequest"
          },
          "3D": {
            "$ref": "#/components/schemas/AuthorizeSplitThreeDSecure"
          }
        }
      },
      "AuthorizeSplitThreeDSecure": {
        "type": "object",
        "properties": {
          "apply": {
            "type": "boolean",
            "description": "Decides if the 3D secure process should be applied.",
            "default": true
          }
        },
        "description": "3D secure parameters"
      },
      "CDMRequest": {
        "type": "object",
        "description": "CyberSource specific parameters. Use the same properties as you would for direct CyberSource requests.",
        "externalDocs": {
          "url": "https://developer.cybersource.com/api/reference/api-reference.html"
        }
      },
      "CancelRequest": {
        "type": "object"
      },
      "CreditError": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/TransactionsErrorCode"
          },
          "message": {
            "type": "string",
            "description": "A human readable message indicating what went wrong."
          },
          "transactionId": {
            "type": "string"
          }
        }
      },
      "CreditResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "When a credit is performed, a new `transactionId` is created"
          },
          "acquirerAuthorizationCode": {
            "type": "string",
            "description": "The authorization code returned by the acquirer or payment method provider."
          }
        }
      },
      "CreditMcpRequest": {
        "required": [
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The targeted currency"
          },
          "amount": {
            "type": "integer",
            "description": "The amount in your targeted currency",
            "format": "int64"
          }
        }
      },
      "CreditRequest": {
        "required": [
          "currency",
          "refno"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "refno": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          },
          "refno2": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Optional customer's reference number. Supported by some payment methods or acquirers."
          },
          "marketplace": {
            "$ref": "#/components/schemas/MarketPlaceCredit"
          },
          "extensions": {
            "$ref": "#/components/schemas/Extension"
          },
          "mcp": {
            "$ref": "#/components/schemas/CreditMcpRequest"
          },
          "PLU": {
            "$ref": "#/components/schemas/SBBHalbtaxPlusCreditRequest"
          }
        }
      },
      "MarketPlaceCredit": {
        "required": [
          "splits"
        ],
        "type": "object",
        "properties": {
          "splits": {
            "type": "array",
            "description": "The marketplace splits",
            "items": {
              "$ref": "#/components/schemas/MarketPlaceSplit"
            }
          }
        }
      },
      "SBBHalbtaxPlusCreditRequest": {
        "type": "object",
        "properties": {
          "reserved": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "pointOfSale": {
            "type": "integer",
            "format": "int32"
          },
          "pointOfDistribution": {
            "type": "integer",
            "format": "int32"
          },
          "novaTransactionID": {
            "type": "string"
          }
        },
        "description": "SBB Halbtax Plus specific parameters for credit"
      },
      "IncreaseResponse": {
        "required": [
          "increasedAmount"
        ],
        "type": "object",
        "properties": {
          "increasedAmount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. Total authorized amount including initial authorization and subsequent authorization increases. ",
            "format": "int64"
          }
        }
      },
      "IncreaseRequest": {
        "required": [
          "amount",
          "currency",
          "refno"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "refno": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          }
        }
      },
      "AlipayResponse": {
        "type": "object",
        "properties": {
          "normalUrl": {
            "type": "string",
            "description": "The url used by the Mini APP in the payment confirmation process."
          }
        },
        "description": "Alipay+ specific response parameters"
      },
      "InitResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The `transactionId` to be used when using Redirect- or Lightbox Mode. If no further action happens with the `transactionId` after initialization, it will be invalidated after 30 minutes."
          },
          "mobileToken": {
            "type": "string",
            "description": "Mobile token which is needed to initialize the Mobile SDKs."
          },
          "WEC": {
            "$ref": "#/components/schemas/WeChatResponse"
          },
          "TWI": {
            "$ref": "#/components/schemas/TwintResponse"
          },
          "ALP": {
            "$ref": "#/components/schemas/AlipayResponse"
          },
          "3D": {
            "$ref": "#/components/schemas/Secure3DResponse"
          }
        }
      },
      "Secure3DResponse": {
        "type": "object",
        "properties": {
          "enrolled": {
            "type": "boolean",
            "description": "Whether the used credit card alias (or card number) is 3D enrolled or not."
          }
        },
        "description": "The `3D` object is only present if init call was done with an `alias`."
      },
      "TwintResponse": {
        "type": "object",
        "description": "Twint specific response parameters"
      },
      "WeChatResponse": {
        "type": "object",
        "properties": {
          "prepayId": {
            "type": "string",
            "description": "The order prepayId. To be used by the Mini APP in the payment confirmation process."
          },
          "timestamp": {
            "type": "string"
          },
          "nonceString": {
            "type": "string"
          },
          "paySign": {
            "type": "string"
          }
        },
        "description": "WeChat specific response parameters"
      },
      "AccommodationMetaData": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version of AccommodationMetaData field (used for tracking schema changes to the field)"
          },
          "lengthOfStay": {
            "type": "integer",
            "description": "The number of nights that the accommodation was booked for.",
            "format": "int32"
          },
          "numberOfGuests": {
            "type": "integer",
            "description": "The number of guests for which the accommodation is booked",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "description": "The date on which the accommodation starts. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`). Internally, Amazon will store the number of days and hours between accommodation.startDate and time of the purchase.",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "The date on which the accommodation ends. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`). If accommodation.lengthOfStay is given, we default to an endDate derived from startDate and lengthOfStay.",
            "format": "date-time"
          },
          "starRating": {
            "type": "integer",
            "description": "Star rating of the accommodation. From 0 (for no star rating) to 5 (for five star hotels)",
            "format": "int32"
          },
          "bookedLastTime": {
            "type": "integer",
            "description": "Days since the buyer booked the same accommodation last time. Use value -1 if buyer books this accommodation for the first time.",
            "format": "int32"
          },
          "city": {
            "type": "string",
            "description": "The city where the accommodation is located. Example: Milan."
          },
          "countryCode": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2, two-letter country code, representing the country where the accommodation is located. Example: IT."
          },
          "zipCode": {
            "type": "string",
            "description": "The zip code of the accommodation address. Example: 40127."
          },
          "accommodationType": {
            "type": "string",
            "description": "Describes the type of accommodation, valid values:[Hotel]"
          },
          "accommodationName": {
            "type": "string",
            "description": "The name of the accommodation, as provided to the merchant by the accommodation itself."
          },
          "class": {
            "type": "string",
            "description": "Suite, Standard or Deluxe accommodation",
            "enum": [
              "SUITE",
              "STANDARD",
              "DELUXE"
            ]
          }
        },
        "description": "AccommodationMetaData"
      },
      "AirlineMetaData": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version of AirlineMetaData field (used for tracking schema changes to the field)"
          },
          "airlineCode": {
            "type": "string",
            "description": "IATA 2-letter airline code. It identifies the carrier. Example: AA (American Airlines)"
          },
          "flightDate": {
            "type": "string",
            "description": "Flight departure date. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`). The time mentioned here is local time",
            "format": "date-time"
          },
          "departureAirport": {
            "type": "string",
            "description": "IATA 3-letter code of the departure airport. Example: CDG"
          },
          "destinationAirport": {
            "type": "string",
            "description": "IATA 3-letter code of the departure airport. Example: LUX"
          },
          "classOfTravel": {
            "type": "string",
            "description": "travel class identifier.",
            "enum": [
              "FIRST_CLASS",
              "BUSINESS_CLASS",
              "ECONOMY",
              "PREMIUM_ECONOMY"
            ]
          },
          "bookedLastTime": {
            "type": "integer",
            "description": "Days since the buyer booked a flight to the same destination last time. Use value -1 if buyer books this destination for the first time.",
            "format": "int32"
          },
          "passengers": {
            "$ref": "#/components/schemas/Passenger"
          }
        },
        "description": "Airline Meta Data"
      },
      "AliasInitCard": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "ALIAS"
          },
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the credit card alias."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the credit card alias."
          },
          "3D": {
            "$ref": "#/components/schemas/CardInitThreeDSecure"
          }
        },
        "description": "Alias card authorization",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardInit"
          }
        ]
      },
      "AmazonFraudContext": {
        "type": "object",
        "properties": {
          "airlineMetaData": {
            "$ref": "#/components/schemas/AirlineMetaData"
          },
          "accommodationMetaData": {
            "$ref": "#/components/schemas/AccommodationMetaData"
          },
          "buyerMetaData": {
            "$ref": "#/components/schemas/BuyerMetaData"
          },
          "orderMetaData": {
            "$ref": "#/components/schemas/OrderMetaData"
          }
        },
        "description": "Supplementary data for fraud detection by amazon"
      },
      "AmazonPayRequest": {
        "type": "object",
        "properties": {
          "sellerNote": {
            "type": "string",
            "description": "Represents a description of the billing agreement that is shown in emails to the buyer and on the Amazon Pay website."
          },
          "fraudContext": {
            "$ref": "#/components/schemas/AmazonFraudContext"
          }
        },
        "description": "Amazon Pay specific request parameters"
      },
      "Browser": {
        "type": "object",
        "properties": {
          "browserAcceptHeader": {
            "type": "string",
            "description": "Exact content of the HTTP accept headers as sent to the 3DS Requestor from the Cardholder's browser.\nThis field is limited to maximum 2048 characters  and if the total length exceeds the limit, the 3DS Server\ntruncates the excess portion.\n\nThis field is required for requests where deviceChannel=02 (BRW).\n"
          },
          "browserIP": {
            "type": "string",
            "description": "IP address of the browser as returned by the HTTP headers to the 3DS Requestor.\nThe field is limited to maximum 45 characters and the accepted values are as following:\n  - IPv4 address is represented in the dotted decimal format of 4 sets of decimal\n    numbers separated by dots. The decimal number in each and every set is in the range\n    0 - 255. Example: 1.12.123.255\n  - IPv6 adress is represented as eight groups of four hexadecimal digits, each group\n    representing 16 bits (two octets). The groups are separated by colons (:).\n    Example: 2011:0db8:85a3:0101:0101:8a2e:0370:7334\n"
          },
          "browserJavaEnabled": {
            "type": "boolean",
            "description": "Boolean that represents the ability of the cardholder browser to execute Java. Value is\nreturned from the navigator.javaEnabled property.\n"
          },
          "browserLanguage": {
            "type": "string",
            "description": "Value representing the browser language as defined in IETF BCP47. The value is limited\nto 1-8 characters. Value is returned from navigator.language property.\nRequired when BrowserJavaScriptEnabled = true; otherwise Optional.\n"
          },
          "browserColorDepth": {
            "type": "string",
            "description": "Value representing the bit depth of the colour palette for displaying images, in bits\nper pixel. Obtained from Cardholder browser using the screen.colorDepth property. The\nfield is limited to 1-2 characters.\n\nFor a list of possible values, refer to\nhttps://www.w3schools.com/jsref/prop_screen_colordepth.asp\n",
            "enum": [
              "1",
              "4",
              "8",
              "15",
              "16",
              "24",
              "32",
              "48"
            ]
          },
          "browserScreenHeight": {
            "type": "integer",
            "description": "Total height of the Cardholder's screen in pixels. Value is returned from the\nscreen.height property. The value is limited to 1-6 characters.\n\nRequired when BrowserJavaScriptEnabled = true; otherwise Optional.\n",
            "format": "int32"
          },
          "browserScreenWidth": {
            "type": "integer",
            "description": "Total width of the Cardholder's screen in pixels. Value is returned from the\nscreen.width property. The value is limited to 1-6 characters.\n\nRequired when BrowserJavaScriptEnabled = true; otherwise Optional.\n",
            "format": "int32"
          },
          "browserTZ": {
            "type": "integer",
            "description": "Time zone offset in minutes between UTC and the Cardholder Browser local time. Note that\nthe offset is positive if the local time zone is behind UTC and negative if it is ahead.\n\nRequired when BrowserJavaScriptEnabled = true; otherwise Optional.\n",
            "format": "int32"
          },
          "browserUserAgent": {
            "type": "string",
            "description": "Exact content of the HTTP user-agent header. The field is limited to maximum 2048\ncharacters. If the total length of the User-Agent sent by the browser exceeds 2048\ncharacters, the 3DS Server truncates the excess portion.\n"
          },
          "challengeWindowSize": {
            "type": "string",
            "description": "Dimensions of the challenge window that has been displayed to the Cardholder. The ACS\nshall reply with content that is formatted to appropriately render in this window to\nprovide the best possible user experience.\n\nPreconfigured sizes are width X height in pixels of the window displayed in the\nCardholder browser window. This is used only to prepare the CReq request and it is not\npart of the AReq flow. If not present it will be omitted.\n\nAccepted values are:\n\t01 -> 250 x 400\n\t02 -> 390 x 400\n\t03 -> 500 x 600\n\t04 -> 600 x 400\n\t05 -> Full screen\n",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05"
            ]
          },
          "browserJavascriptEnabled": {
            "type": "boolean",
            "description": "Boolean that represents the ability of the cardholder browser to execute JavaScript.\n"
          }
        },
        "description": "Contains browser information."
      },
      "BuyerMetaData": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version of BuyerMetaData field (used for tracking schema changes to the field)."
          },
          "isFirstTimeCustomer": {
            "type": "boolean",
            "description": "True if the buyer is purchasing from the merchant for the first time. Else false."
          },
          "numberOfPastPurchases": {
            "type": "integer",
            "description": "The number of purchases the buyer has made from the merchant in the past.",
            "format": "int32"
          },
          "numberOfDisputedPurchases": {
            "type": "integer",
            "description": "The number of purchases that has been disputed by the buyer when making purchases from the merchant.",
            "format": "int32"
          },
          "hasOpenDispute": {
            "type": "boolean",
            "description": "True if the buyer has an ongoing dispute regarding a past purchase."
          },
          "riskScore": {
            "type": "string",
            "description": "The risk score which the merchant computes for a buyer. The value must be a decimal in the range between 0 (lowest risk) and 1 (highest risk)."
          },
          "userAgent": {
            "type": "string",
            "description": "The user agent of the browser used by the buyer to make the purchase on merchant site. Example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36."
          },
          "language": {
            "type": "string",
            "description": "Language in which the buyer is viewing the site at the time of placing the order in 'language-LOCALE' format example: en-US. Use ISO 639-1:2002 code for the language part (en) and ISO 3166-1 alpha-2 for the LOCALE part (US)."
          },
          "recipientEmailMatches": {
            "type": "boolean",
            "description": "True, if the recipient email is exactly the same as the one on the amazon account used for payment, false otherwise."
          },
          "buyerIsATraveler": {
            "type": "boolean",
            "description": "True, if the account holder of the amazon account is actually one of the travelers, false otherwise."
          }
        },
        "description": "Buyer Meta Data"
      },
      "CardInit": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "PLAIN": "#/components/schemas/PlainInitCard",
            "ALIAS": "#/components/schemas/AliasInitCard",
            "DEVICE_TOKEN": "#/components/schemas/DeviceTokenInitCard"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PlainInitCard"
          },
          {
            "$ref": "#/components/schemas/AliasInitCard"
          },
          {
            "$ref": "#/components/schemas/DeviceTokenInitCard"
          }
        ]
      },
      "CardInitThreeDSecure": {
        "type": "object",
        "properties": {
          "threeDSRequestor": {
            "$ref": "#/components/schemas/ThreeDSRequestor"
          },
          "threeDSRequestorURL": {
            "type": "string",
            "description": "Fully qualified URL of 3DS Requestor website or customer care site. This field is optional\nand it is recommended to be configured in the configuration.\n",
            "format": "url"
          },
          "cardholderAccount": {
            "$ref": "#/components/schemas/CardholderAccount"
          },
          "cardholder": {
            "$ref": "#/components/schemas/Cardholder"
          },
          "purchase": {
            "$ref": "#/components/schemas/Purchase"
          },
          "merchant": {
            "$ref": "#/components/schemas/MerchantData"
          },
          "broadInfo": {
            "type": "string"
          },
          "browserInformation": {
            "$ref": "#/components/schemas/Browser"
          },
          "threeRIInd": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05",
              "06",
              "07",
              "08",
              "09",
              "10",
              "11",
              "12"
            ]
          },
          "apply": {
            "type": "boolean",
            "description": "Decides if the 3D secure process should be applied.",
            "default": true
          },
          "challengeIndicator": {
            "type": "string"
          }
        },
        "description": "If 3D authentication data is available, the `3D` object can be used to send the relevant 3D parameters. Please get in contact with us if you have a dedicated 3D provider."
      },
      "Cardholder": {
        "type": "object",
        "properties": {
          "addrMatch": {
            "type": "string",
            "enum": [
              "Y",
              "N"
            ]
          },
          "billAddrCity": {
            "type": "string",
            "description": "The city of the Cardholder billing address associated with the card used for this\npurchase. This field is limited to maximum of 50 characters.\n\nRequired unless market or regional mandate restricts sending this information.\n"
          },
          "billAddrCountry": {
            "type": "string",
            "description": "The country of the Cardholder billing address associated with the card used for this\npurchase. This field is limited to 3 characters. This value shall be the ISO 3166-1\nnumeric country code, except values from range 901 - 999 which are reserved by ISO.\n"
          },
          "billAddrLine1": {
            "type": "string",
            "description": "First line of the street address or equivalent local portion of the Carholder billing\naddress associated with the card use for this purchase. This field is limited to maximum\n50 characters.\n"
          },
          "billAddrLine2": {
            "type": "string",
            "description": "Second line of the street address or equivalent local portion of the Carholder billing\naddress associated with the card use for this purchase. This field is limited to maximum\n50 characters.\n"
          },
          "billAddrLine3": {
            "type": "string",
            "description": "Third line of the street address or equivalent local portion of the Carholder billing\naddress associated with the card use for this purchase. This field is limited to maximum\n50 characters.\n"
          },
          "billAddrPostCode": {
            "type": "string",
            "description": "ZIP or other postal code of the Cardholder billing address associated with the card used\nfor this purchase. This field is limited to maximum 16 characters.\n"
          },
          "billAddrState": {
            "type": "string",
            "description": "The state or province of the Cardholder billing address associated with the card used\nfor this purchase.  This field is limited to 3 characters. The value should be the\ncountry subtivision code defined in ISO 3166-2.\n"
          },
          "email": {
            "type": "string",
            "description": "The email address associated with the account that is either entered by the Cardholder,\nor is on file with the 3DS Requestor. This field is limited to maximum 256 characters\nand shall meet requirements of Section 3.4 of IETF RFC 5322.\n\nThis field is required unless market or regional mandate restricts sending this\ninformation.\n"
          },
          "homePhone": {
            "$ref": "#/components/schemas/CardholderPhoneNumber"
          },
          "mobilePhone": {
            "$ref": "#/components/schemas/CardholderPhoneNumber"
          },
          "workPhone": {
            "$ref": "#/components/schemas/CardholderPhoneNumber"
          },
          "cardholderName": {
            "type": "string",
            "description": "Name of the Cardholder. This field is limited to maximum of 50 characters.\n\nThis field is required unless market or regional mandate restricts sending this\ninformation.\n"
          },
          "shipAddrCity": {
            "type": "string",
            "description": "City portion of the shipping address requested by the Cardholder.\n"
          },
          "shipAddrCountry": {
            "type": "string",
            "description": "Country of the shipping address requested by the Cardholder. This field is limited to 3\ncharacters. This value shall be the ISO 3166-1 numeric country code, except values from\nrange 901 - 999 which are reserved by ISO.\n"
          },
          "shipAddrLine1": {
            "type": "string",
            "description": "First line of the street address or equivalent local portion of the shipping address\nassociated with the card use for this purchase. This field is limited to maximum 50\ncharacters.\n"
          },
          "shipAddrLine2": {
            "type": "string",
            "description": "Second line of the street address or equivalent local portion of the shipping address\nassociated with the card use for this purchase. This field is limited to maximum 50\ncharacters.\n"
          },
          "shipAddrLine3": {
            "type": "string",
            "description": "Third line of the street address or equivalent local portion of the shipping address\nassociated with the card use for this purchase. This field is limited to maximum 50\ncharacters.\n"
          },
          "shipAddrPostCode": {
            "type": "string",
            "description": "ZIP or other postal code of the shipping address associated with the card used for this\npurchase. This field is limited to maximum 16 characters.\n"
          },
          "shipAddrState": {
            "type": "string",
            "description": "The state or province of the shipping address associated with the card used for this\npurchase. This field is limited to 3 characters. The value should be the country\nsubtivision code defined in ISO 3166-2.\n"
          }
        },
        "description": "Contains information for the Cardholder.\nThis field is required unless market or regional mandate restricts sending this information.\n"
      },
      "CardholderAccount": {
        "type": "object",
        "properties": {
          "cardExpiryDate": {
            "type": "string"
          },
          "acctInfo": {
            "$ref": "#/components/schemas/CardholderAccountInformation"
          },
          "acctID": {
            "type": "string"
          }
        },
        "description": "Contains information for the Cardholder Account."
      },
      "CardholderAccountInformation": {
        "type": "object",
        "properties": {
          "chAccDate": {
            "type": "string",
            "format": "date-time"
          },
          "chAccChangeInd": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04"
            ]
          },
          "chAccChange": {
            "type": "string",
            "format": "date-time"
          },
          "chAccPwChangeInd": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05"
            ]
          },
          "chAccPwChange": {
            "type": "string",
            "format": "date-time"
          },
          "shipAddressUsageInd": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04"
            ]
          },
          "shipAddressUsage": {
            "type": "string",
            "format": "date-time"
          },
          "txnActivityDay": {
            "type": "integer",
            "format": "int32"
          },
          "txnActivityYear": {
            "type": "integer",
            "format": "int32"
          },
          "provisionAttemptsDay": {
            "type": "integer",
            "format": "int32"
          },
          "nbPurchaseAccount": {
            "type": "integer",
            "format": "int32"
          },
          "suspiciousAccActivity": {
            "type": "string",
            "enum": [
              "01",
              "02"
            ]
          },
          "shipNameIndicator": {
            "type": "string",
            "enum": [
              "01",
              "02"
            ]
          },
          "paymentAccInd": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05"
            ]
          },
          "paymentAccAge": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CardholderPhoneNumber": {
        "type": "object",
        "properties": {
          "cc": {
            "type": "string"
          },
          "subscriber": {
            "type": "string"
          }
        },
        "description": "The work phone provided by the Cardholder. The object contains the following fields:\n  cc -> Country Code of the phone, limited to 1-3 characters\n  subscriber -> subscriber section of the number, limited to maximum 15 characters.\n\nRefer to ITU-E.164 for additional information on format and length.\n"
      },
      "DeviceTokenInitCard": {
        "required": [
          "expiryMonth",
          "expiryYear",
          "token",
          "tokenType",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "DEVICE_TOKEN"
          },
          "token": {
            "type": "string",
            "description": "Device token value."
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the network token."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the network token."
          },
          "tokenType": {
            "type": "string",
            "description": "The scheme which issued the network token.",
            "enum": [
              "APPLE_PAY",
              "GOOGLE_PAY",
              "SAMSUNG_PAY"
            ]
          },
          "cryptogram": {
            "type": "string",
            "description": "The cryptogram of the token"
          },
          "eci": {
            "type": "string",
            "description": "the Eci of the token"
          }
        },
        "description": "Device token authorization",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardInit"
          }
        ]
      },
      "ElvInitRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "iban": {
            "type": "string"
          },
          "mandateId": {
            "type": "string",
            "description": "The SEPA mandate reference"
          },
          "mandateText": {
            "type": "string"
          }
        },
        "description": "ELV specific payment parameters."
      },
      "EpsRequest": {
        "type": "object",
        "properties": {
          "bankbic": {
            "type": "string",
            "description": "Identification of the customer’s (buyer’s) financial institution by a BIC."
          },
          "orderInfoText": {
            "type": "string",
            "description": "Text between the beneficiary/merchant and the buyer which will not be part of the payment instruction. If submitted, the final orderInfoText will be: `refno + ' ' + orderInfoText`",
            "default": "refno"
          }
        },
        "description": "EPS specific request parameters"
      },
      "GPARequest": {
        "type": "object",
        "properties": {
          "shoppingCartType": {
            "type": "string",
            "description": "The shoppingCartType defines type of the shopping cart. The following values are allowed: \nPHYSICAL, DIGITAL, MIXED, ANONYMOUS_DONATION, AUTHORITIES_PAYMENT \nMIXED is the default value."
          }
        },
        "description": "Giropay specific request parameters"
      },
      "InitMcpRequest": {
        "required": [
          "amount",
          "currency",
          "provider",
          "reasonIndicator",
          "userId"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The targeted currency"
          },
          "amount": {
            "type": "integer",
            "description": "The amount in your targeted currency",
            "format": "int64"
          },
          "conversionRate": {
            "type": "number",
            "description": "Conversion rate received from the currency rates endpoint. Required in case of dynamic MCP.",
            "format": "double"
          },
          "transactionDate": {
            "type": "string",
            "description": "Transaction datetime received from the currency rates endpoint",
            "format": "date-time"
          },
          "retrievalReferenceNumber": {
            "type": "string",
            "description": "RetrievalReferenceNumber received from the currency rates endpoint"
          },
          "userId": {
            "type": "string"
          },
          "provider": {
            "type": "string",
            "description": "The provider for multi currency processing"
          },
          "reasonIndicator": {
            "type": "string",
            "description": "If received from acquirer the reason indicator can be set"
          }
        }
      },
      "InitRequest": {
        "required": [
          "currency",
          "refno"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "refno": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          },
          "refno2": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Optional customer's reference number. Supported by some payment methods or acquirers."
          },
          "autoSettle": {
            "type": "boolean",
            "description": "Whether to automatically settle the transaction after an authorization or not. If not present with the init request, the settings defined in the dashboard ('Authorisation / Settlement' or 'Direct Debit') will be used. Those settings will only be used for web transactions and not for server to server API calls."
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerRequest"
          },
          "billing": {
            "$ref": "#/components/schemas/BillingAddress"
          },
          "shipping": {
            "$ref": "#/components/schemas/ShippingAddress"
          },
          "order": {
            "$ref": "#/components/schemas/OrderRequest"
          },
          "card": {
            "$ref": "#/components/schemas/CardInit"
          },
          "BON": {
            "$ref": "#/components/schemas/BoncardRequest"
          },
          "PAP": {
            "$ref": "#/components/schemas/PayPalInitRequest"
          },
          "PFC": {
            "$ref": "#/components/schemas/PfcInitRequest"
          },
          "REK": {
            "$ref": "#/components/schemas/RekaRequest"
          },
          "KLN": {
            "$ref": "#/components/schemas/KlarnaInitRequest"
          },
          "TWI": {
            "$ref": "#/components/schemas/TwintInitRequest"
          },
          "INT": {
            "$ref": "#/components/schemas/ByjunoAuthorizeRequest"
          },
          "ALP": {
            "$ref": "#/components/schemas/AlipayRequest"
          },
          "ESY": {
            "$ref": "#/components/schemas/ESY"
          },
          "MFA": {
            "$ref": "#/components/schemas/MfaAuthorizeRequest"
          },
          "SWP": {
            "$ref": "#/components/schemas/SwissPassRequest"
          },
          "PLU": {
            "$ref": "#/components/schemas/SBBHalbtaxPlusInitRequest"
          },
          "airlineData": {
            "$ref": "#/components/schemas/AirlineDataRequest"
          },
          "accertify": {
            "$ref": "#/components/schemas/Accertify"
          },
          "threeRIData": {
            "$ref": "#/components/schemas/ThreeRIData"
          },
          "DVI": {
            "$ref": "#/components/schemas/DeltaVistaData"
          },
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. Can be omitted for use cases where only a registration should take place (if the payment method supports registrations)",
            "format": "int64"
          },
          "language": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "This parameter specifies the language (language code) in which the payment page should be presented to the cardholder. The <a href='https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes' target='_blank'>ISO-639-1</a> two letter language codes listed above are supported",
            "enum": [
              "en",
              "de",
              "fr",
              "it",
              "es",
              "el",
              "fi",
              "hu",
              "ko",
              "nl",
              "no",
              "da",
              "pl",
              "pt",
              "ru",
              "ja",
              "sk",
              "sl",
              "sv",
              "tr",
              "zh"
            ]
          },
          "paymentMethods": {
            "maxLength": 3,
            "minLength": 3,
            "type": "array",
            "description": "An array of payment method shortnames. For example `[\"VIS\", \"PFC\"]`. If omitted, all available payment methods will be displayed on the payment page. If the Mobile SDKs are used (`returnMobileToken`), this array is mandatory.",
            "items": {
              "maxLength": 3,
              "minLength": 3,
              "type": "string",
              "description": "An array of payment method shortnames. For example `[\"VIS\", \"PFC\"]`. If omitted, all available payment methods will be displayed on the payment page. If the Mobile SDKs are used (`returnMobileToken`), this array is mandatory.",
              "enum": [
                "ACC",
                "ALP",
                "APL",
                "AMX",
                "AZP",
                "BAC",
                "BON",
                "CBL",
                "CFY",
                "CSY",
                "CUP",
                "DEA",
                "DIN",
                "DII",
                "DIB",
                "DIS",
                "DNK",
                "ECA",
                "ELV",
                "EPS",
                "ESY",
                "GFT",
                "GPA",
                "HPC",
                "INT",
                "JCB",
                "JEL",
                "KLN",
                "MAU",
                "MDP",
                "MFA",
                "MFX",
                "MPA",
                "MFG",
                "MPG",
                "MPX",
                "MYO",
                "PAP",
                "PAY",
                "PEF",
                "PFC",
                "PSC",
                "REK",
                "SAM",
                "SWB",
                "SCX",
                "SWP",
                "TWI",
                "UAP",
                "VIS",
                "WEC",
                "SWH",
                "VPS",
                "MBP",
                "CUV",
                "GEP",
                "PLU",
                "DVI"
              ]
            }
          },
          "theme": {
            "$ref": "#/components/schemas/theme"
          },
          "redirect": {
            "$ref": "#/components/schemas/RedirectRequest"
          },
          "webhook": {
            "$ref": "#/components/schemas/WebhookRequest"
          },
          "option": {
            "$ref": "#/components/schemas/OptionRequest"
          },
          "MFX": {
            "$ref": "#/components/schemas/MFXRequest"
          },
          "MPX": {
            "$ref": "#/components/schemas/MPXRequest"
          },
          "AZP": {
            "$ref": "#/components/schemas/AmazonPayRequest"
          },
          "EPS": {
            "$ref": "#/components/schemas/EpsRequest"
          },
          "SWH": {
            "$ref": "#/components/schemas/SwishRequest"
          },
          "VPS": {
            "$ref": "#/components/schemas/VippsRequest"
          },
          "MBP": {
            "$ref": "#/components/schemas/MobilePayRequest"
          },
          "WEC": {
            "$ref": "#/components/schemas/WeChatRequest"
          },
          "ELV": {
            "$ref": "#/components/schemas/ElvInitRequest"
          },
          "SWB": {
            "$ref": "#/components/schemas/SwissBillingRequest"
          },
          "MDP": {
            "$ref": "#/components/schemas/MDPInitRequest"
          },
          "PSC": {
            "$ref": "#/components/schemas/PaysafecardRequest"
          },
          "GPA": {
            "$ref": "#/components/schemas/GPARequest"
          },
          "mcp": {
            "$ref": "#/components/schemas/InitMcpRequest"
          },
          "extensions": {
            "$ref": "#/components/schemas/Extension"
          }
        }
      },
      "KlarnaInitRequest": {
        "type": "object",
        "properties": {
          "subPaymentMethod": {
            "type": "string",
            "description": "The Klarna specific payment method used for the transaction.",
            "enum": [
              "pay_now",
              "pay_later",
              "pay_over_time",
              "direct_debit",
              "direct_bank_transfer"
            ]
          },
          "events": {
            "type": "array",
            "description": "A list of Klarna events.",
            "items": {
              "$ref": "#/components/schemas/KlarnaEvent"
            }
          },
          "subscriptions": {
            "type": "array",
            "description": "A list of Klarna subscriptions.",
            "items": {
              "$ref": "#/components/schemas/KlarnaSubscription"
            }
          },
          "accountInfos": {
            "type": "array",
            "description": "A list of Klarna customer account infos.",
            "items": {
              "$ref": "#/components/schemas/KlarnaCustomerAccountInfo"
            }
          },
          "historySimple": {
            "type": "array",
            "description": "A list of simple history entries",
            "items": {
              "$ref": "#/components/schemas/KlarnaPaymentHistorySimple"
            }
          },
          "historyFull": {
            "type": "array",
            "description": "A list of full history entries",
            "items": {
              "$ref": "#/components/schemas/KlarnaPaymentHistoryFull"
            }
          },
          "hotelReservationDetails": {
            "type": "array",
            "description": "A list of hotel reservation details",
            "items": {
              "$ref": "#/components/schemas/KlarnaHotelReservationDetail"
            }
          },
          "trainReservationDetails": {
            "type": "array",
            "description": "A list of train reservation details",
            "items": {
              "$ref": "#/components/schemas/KlarnaTrainReservationDetail"
            }
          },
          "ferryReservationDetails": {
            "type": "array",
            "description": "A list of ferry reservation details",
            "items": {
              "$ref": "#/components/schemas/KlarnaFerryReservationDetail"
            }
          }
        }
      },
      "MDPInitRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        }
      },
      "MFXRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "paycard": {
            "type": "string"
          },
          "invoiceOnDelivery": {
            "type": "boolean",
            "description": "If set to `true`, The customers bank details (ESR data) are available from the Status API"
          }
        },
        "description": "MFX specific parameters"
      },
      "MPXRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "paycard": {
            "type": "string"
          },
          "invoiceOnDelivery": {
            "type": "boolean",
            "description": "If set to `true`, The customers bank details (ESR data) are available from the Status API"
          }
        },
        "description": "MPX specific parameters"
      },
      "MerchantData": {
        "type": "object",
        "properties": {
          "whiteListStatus": {
            "type": "string",
            "enum": [
              "Y",
              "N"
            ]
          }
        },
        "description": "Contains merchant information."
      },
      "MerchantRiskIndicator": {
        "type": "object",
        "properties": {
          "shipIndicator": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05",
              "06",
              "07"
            ]
          },
          "deliveryTimeframe": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04"
            ]
          },
          "deliveryEmailAddress": {
            "type": "string"
          },
          "reorderItemsInd": {
            "type": "string",
            "enum": [
              "01",
              "02"
            ]
          },
          "preOrderPurchaseInd": {
            "type": "string",
            "enum": [
              "01",
              "02"
            ]
          },
          "preOrderDate": {
            "type": "string",
            "format": "date-time"
          },
          "giftCardAmount": {
            "type": "integer",
            "format": "int32"
          },
          "giftCardCurr": {
            "type": "string"
          },
          "giftCardCount": {
            "type": "string"
          }
        }
      },
      "MobilePayRequest": {
        "type": "object",
        "properties": {
          "mobilePayPhoneNumber": {
            "type": "string",
            "description": "The registered cellphone number of the person that makes the payment. It can only contain numbers and has to be at least 8 and at most 15 numbers. It also needs to match the following format in order to be found in MobilePay: country code + cellphone number (without leading zero). E.g.: +4589371020"
          }
        },
        "description": "MobilePay specific parameters"
      },
      "OptionRequest": {
        "type": "object",
        "properties": {
          "createAlias": {
            "type": "boolean",
            "description": "Whether an alias should be created for this transaction or not. If set to `true` an alias will be created. This alias can then be used to [initialize](#operation/init) or [authorize](#operation/authorize) a transaction. One possible use case is to charge the card of an existing (registered) cardholder."
          },
          "returnMaskedCardNumber": {
            "type": "boolean",
            "description": "Whether to return the masked card number. Format: `520000xxxxxx0080`"
          },
          "returnCustomerCountry": {
            "type": "boolean",
            "description": "If set to `true`, the country of the customers issuer will be returned."
          },
          "authenticationOnly": {
            "type": "boolean",
            "description": "Whether to only authenticate the transaction (3D process only). If set to `true`, the actual authorization will not take place."
          },
          "rememberMe": {
            "type": "string",
            "description": "Whether to show a checkbox on the payment page to let the customer choose if they want to save their card information.",
            "enum": [
              "true",
              "checked"
            ]
          },
          "returnMobileToken": {
            "type": "boolean",
            "description": "Indicates that a mobile token should be created. This is needed when using our Mobile SDKs."
          },
          "storeCustomerData": {
            "type": "boolean",
            "description": "If `true`, the values passed in the customer object are stored and visiblein the web admin tool on the transaction details. If `false`, no customer data will bestored.",
            "default": true
          }
        }
      },
      "OrderMetaData": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version of OrderMetaData field (used for tracking schema changes to the field)."
          },
          "numberOfItems": {
            "type": "integer",
            "description": "The number of items that the order contains. For example, two cups of coffee.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "Type of items. Physical, Digital, Mixed",
            "enum": [
              "PHYSICAL",
              "DIGITAL",
              "MIXED"
            ]
          },
          "relatedOrderReferenceId": {
            "type": "string",
            "description": "Order ID of the related order. For the deposit this field will be empty, while for any subsequent payment related to the same booking this will be the order ID of the deposit transaction."
          }
        },
        "description": "Order Meta Data"
      },
      "Passenger": {
        "type": "object",
        "properties": {
          "numberOfPassengers": {
            "type": "integer",
            "description": "Number of passengers",
            "format": "int32"
          },
          "numberOfChildren": {
            "type": "integer",
            "description": "The number of passengers who are children (ages 2 to 18)",
            "format": "int32"
          },
          "numberOfInfants": {
            "type": "integer",
            "description": "The number of passengers who are under the age of 2",
            "format": "int32"
          }
        },
        "description": "Passengers information"
      },
      "PayPalInitRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "imageUrl": {
            "type": "string",
            "description": "A https URL to the logo of the merchant."
          },
          "displayShippingDetails": {
            "type": "boolean",
            "description": "Regulates whether the shipping details are displayed or not.\n(Note: `forwardCustomerDetails` and `displayShippingDetails` should be set\nto `no` if the shipping details should not be shown on the PayPal page."
          },
          "forwardCustomerDetails": {
            "type": "boolean",
            "description": "`true` if the customer details (if submitted) should be forwarded to PayPal. Default is `false`."
          },
          "returnCustomerDetails": {
            "type": "boolean",
            "description": "`true` if the customer details should be retrieved from PayPal."
          },
          "createOrder": {
            "type": "boolean",
            "description": "`true` if a PayPal AC2 order is to be created. Default is `false`."
          },
          "fraudSessionId": {
            "type": "string",
            "description": "The PayPal FraudNet session identifier as specified in the API documentation.",
            "externalDocs": {
              "url": "https://developer.paypal.com/docs/limited-release/fraudnet/integrate/add-parameter-block/"
            }
          },
          "transactionContext": {
            "$ref": "#/components/schemas/TransactionContext"
          }
        },
        "description": "PayPal specific parameters"
      },
      "PaymentInstrument": {
        "type": "object",
        "properties": {
          "paymentInstrumentID": {
            "type": "string"
          },
          "paymentType": {
            "type": "string"
          }
        }
      },
      "PaysafecardRequest": {
        "type": "object",
        "properties": {
          "merchantClientId": {
            "type": "string",
            "description": "The merchantClientId identifies the Customer on Paysafecard's side. \nSpecify the same merchantClientId for all transactions of a specific customer. If no merchantClientId is specified during your init requests, we will apply a random value. \nPlease refer to the Paysafecard documentation for the guidelines of possible merchantClientIds."
          }
        },
        "description": "Paysafecard specific request parameters"
      },
      "PfcInitRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        }
      },
      "PlainInitCard": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "PLAIN"
          },
          "number": {
            "type": "string",
            "description": "Merchants that have the option to store card information on their end can use the `number` property instead of `alias`. Please note that this option is only available to merchants that fulfill the requirements by PCI DSS to store sensitive information on their side and only upon request.",
            "example": "4242424242424242"
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the credit card."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the credit card."
          },
          "3D": {
            "$ref": "#/components/schemas/CardInitThreeDSecure"
          }
        },
        "description": "Plain card authorization",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardInit"
          }
        ]
      },
      "Purchase": {
        "type": "object",
        "properties": {
          "purchaseInstalData": {
            "type": "integer",
            "format": "int32"
          },
          "merchantRiskIndicator": {
            "$ref": "#/components/schemas/MerchantRiskIndicator"
          },
          "purchaseAmount": {
            "type": "integer"
          },
          "purchaseCurrency": {
            "type": "string"
          },
          "purchaseExponent": {
            "type": "integer",
            "format": "int32"
          },
          "purchaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "recurringExpiry": {
            "type": "string",
            "format": "date-time"
          },
          "recurringFrequency": {
            "type": "integer",
            "format": "int32"
          },
          "transType": {
            "type": "string",
            "enum": [
              "01",
              "03",
              "10",
              "11",
              "28"
            ]
          }
        },
        "description": "Contains purchase information."
      },
      "RedirectRequest": {
        "type": "object",
        "properties": {
          "successUrl": {
            "type": "string",
            "description": "The URL where the customer gets redirected to if the transaction was successful."
          },
          "cancelUrl": {
            "type": "string",
            "description": "The URL where the customer gets redirected to if the transaction was canceled."
          },
          "errorUrl": {
            "type": "string",
            "description": "The URL where the customer gets redirected to if an error occurred."
          },
          "startTarget": {
            "type": "string",
            "description": "If the payment is started within an iframe or when using the Lightbox Mode, use value `_top`. This ensures a proper browser flow for payment methods who need a redirect."
          },
          "returnTarget": {
            "type": "string",
            "description": "If the payment is started within an iframe or when using the Lightbox Mode, use `_top` if the redirect URLs should be opened full screen when payment returns from a 3rd party (for example 3D)."
          },
          "method": {
            "type": "string",
            "description": "The preferred HTTP method for the redirect request (`GET` or `POST`). When using GET as a method, the query string parameter `datatransTrxId` will be added to the corresponding return url upon redirection. In case of POST, all the query parameters from the corresponding return url will be moved to the application/x-www-form-urlencoded body of the redirection request along with the added `datatransTrxId` parameter.",
            "enum": [
              "GET",
              "POST"
            ],
            "default": "GET"
          }
        },
        "description": "The redirect object is used to customize the browser behaviour when using the payment page (Redirect or Lightbox Mode) to do a transaction."
      },
      "SBBHalbtaxPlusInitRequest": {
        "type": "object",
        "properties": {
          "reserved": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "pointOfSale": {
            "type": "integer",
            "format": "int32"
          },
          "pointOfDistribution": {
            "type": "integer",
            "format": "int32"
          },
          "novaTransactionID": {
            "type": "string"
          },
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "paymentInstrument": {
            "$ref": "#/components/schemas/PaymentInstrument"
          }
        }
      },
      "SwishRequest": {
        "type": "object",
        "properties": {
          "payerAlias": {
            "type": "string",
            "description": "The registered cellphone number of the person that makes the payment. It can only contain numbers and has to be at least 8 and at most 15 numbers. It also needs to match the following format in order to be found in Swish: country code + cellphone number (without leading zero). E.g.: 46712345678"
          },
          "paymentRequestMessage": {
            "type": "string",
            "description": "Merchant supplied message about the payment/order. Max 50 characters. Common allowed characters are the letters a-ö, A-Ö, the numbers 0-9, and special characters !?=#$%&()*+,-./:;<'\"@. In addition, the following special characters are also allowed: ^¡¢£€¥¿Š§šŽžŒœŸÀÁÂÃÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕØØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ"
          }
        },
        "description": "Swish specific parameters"
      },
      "SwissBillingRequest": {
        "type": "object",
        "properties": {
          "paymentPeriod": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Swissbilling specific parameters."
      },
      "ThreeDSRequestor": {
        "type": "object",
        "properties": {
          "threeDSRequestorAuthenticationInd": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05",
              "06"
            ]
          },
          "threeDSRequestorAuthenticationInfo": {
            "$ref": "#/components/schemas/ThreeDSRequestorAuthenticationInformation"
          },
          "threeDSRequestorChallengeInd": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05",
              "06",
              "07",
              "08",
              "09",
              "82",
              "90"
            ]
          },
          "threeDSRequestorDecReqInd": {
            "type": "string",
            "enum": [
              "Y",
              "N"
            ]
          },
          "threeDSRequestorDecMaxTime": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Contains information for the 3DS Requestor."
      },
      "ThreeDSRequestorAuthenticationInformation": {
        "type": "object",
        "properties": {
          "threeDSReqAuthMethod": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05",
              "06"
            ]
          },
          "threeDSReqAuthTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "threeDSReqAuthData": {
            "type": "string"
          }
        }
      },
      "TransactionContext": {
        "type": "object",
        "description": "PayPal transaction context specific parameters. Use the same properties as you would for direct Transaction Context requests"
      },
      "TwintInitRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "orderDetailsUrl": {
            "type": "string",
            "description": "URL to the order details page, where the merchant displays a summary of the order and/or allows other functionality that is relevant for the use case."
          },
          "messageTypeIdValidityHours": {
            "type": "integer",
            "description": "Number of hours that messageTypeId (the Spotlight Message identifier provided by TWINT) will be valid. Spotlight message will be displayed during these validity hours.",
            "format": "int32"
          },
          "returnAppScheme": {
            "type": "string",
            "description": "Parameter which needs to be appended to the URL used in Twint Browser-to-App switch for iOS. For example 'twint-issuer1'."
          },
          "returnAppPackage": {
            "type": "string",
            "description": "Parameter which needs to be appended to the URL used in Twint Browser-to-App switch for Android. For example 'ch.twint.payment'."
          },
          "disableEnforceRegistrationWithDebit": {
            "type": "boolean",
            "description": "The parameter is designed to make registration optional in Debit and UoF Registration cases. By default, this parameter is set to 'false."
          }
        }
      },
      "VippsRequest": {
        "type": "object",
        "properties": {
          "customerMobileNumber": {
            "type": "string",
            "description": "Mobile number (eight digits) of the user who has to pay for the transaction from Vipps."
          },
          "paymentText": {
            "type": "string",
            "description": "Text to be displayed to end user."
          }
        },
        "description": "Vipps specific parameters"
      },
      "WeChatRequest": {
        "required": [
          "subtype"
        ],
        "type": "object",
        "properties": {
          "subtype": {
            "type": "string",
            "description": "The WeChat specific payment method used for the transaction.",
            "enum": [
              "MINI_APP"
            ]
          },
          "openId": {
            "type": "string"
          },
          "itemDescription": {
            "type": "string"
          }
        },
        "description": "WeChat specific parameters"
      },
      "WebhookRequest": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL where the webhook has to be sent to."
          }
        },
        "description": "Used to define the webhook configuration. If not set, the webhook configuration from the merchant configuration will be used."
      },
      "theme": {
        "type": "object",
        "properties": {
          "configuration": {
            "$ref": "#/components/schemas/themeConfiguration"
          }
        },
        "description": "The theme (including configuration options) to be used when rendering the payment page."
      },
      "themeConfiguration": {
        "type": "object",
        "properties": {
          "brandColor": {
            "type": "string",
            "description": "Hex notation of a color"
          },
          "textColor": {
            "type": "string",
            "description": "The color of the text in the header bar if no logo is given",
            "enum": [
              "white",
              "black"
            ]
          },
          "logoType": {
            "type": "string",
            "description": "The header logo's display style",
            "enum": [
              "circle",
              "rectangle",
              "none"
            ]
          },
          "logoBorderColor": {
            "type": "string",
            "description": "Decides whether the logo shall be styled with a border around it, if the value is true the default background color is chosen, else the provided string is used as color value"
          },
          "brandButton": {
            "type": "string",
            "description": "Decides if the pay button should have the same color as the brandColor. If set to false the hex color #01669F will be used as a default"
          },
          "payButtonTextColor": {
            "type": "string",
            "description": "The color of the pay button",
            "enum": [
              "black",
              "white"
            ]
          },
          "logoSrc": {
            "type": "string",
            "description": "An SVG image provided by the merchant. The image needs to be uploaded by using the Datatrans Web Administration Tool"
          },
          "initialView": {
            "type": "string",
            "description": "Wheter the payment page shows the payment method selection as list (default) or as a grid",
            "enum": [
              "list",
              "grid"
            ]
          },
          "brandTitle": {
            "type": "boolean",
            "description": "If set to `false` and no logo is used (see `logoSrc`), the payment page header will be empty"
          }
        },
        "description": "Theme configuration options when using the default `DT2015` theme"
      },
      "ByjunoScreenRequest": {
        "required": [
          "subtype"
        ],
        "type": "object",
        "properties": {
          "subtype": {
            "type": "string",
            "description": "The Byjuno specific payment method used for the transaction.",
            "enum": [
              "INVOICE",
              "INSTALLMENT",
              "BYJUNO-INVOICE",
              "MONTHLYINVOICE"
            ]
          },
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "customerEmailConfirmed": {
            "type": "boolean",
            "description": "Indicates that the customer has confirmed the email address to the merchant",
            "default": false
          },
          "customerInfo1": {
            "type": "string",
            "description": "Customer information for credit check."
          },
          "customerInfo2": {
            "type": "string",
            "description": "Customer information for credit check."
          },
          "deliveryMethod": {
            "type": "string",
            "description": "Can be one of POST (Delivery by Swiss Post), SHOP (Point of Sale) or HLD (Home Delivery Service)"
          },
          "deviceFingerprintId": {
            "type": "string",
            "description": "Identification of the customer in the shop"
          },
          "paperInvoice": {
            "type": "boolean",
            "description": "Whether or not to send a paper invoice."
          },
          "repaymentType": {
            "maximum": 20,
            "minimum": 0,
            "type": "integer",
            "description": "Number from 1 to 20 to indicate the repayment schedule. This is used in combination with payment methods and defined per client configuration.",
            "format": "int32"
          },
          "riskOwner": {
            "type": "string",
            "description": "Defines which party should take the risk.",
            "enum": [
              "IJ",
              "CLIENT"
            ]
          },
          "siteId": {
            "type": "string",
            "description": "Can be used in case when client operates different legally separated stores / points of sale."
          },
          "verifiedDocument1Type": {
            "type": "string",
            "description": "Indication if merchant is having verified documents from client request.",
            "enum": [
              "swiss-travel-pass",
              "other"
            ]
          },
          "verifiedDocument1Number": {
            "type": "string",
            "description": "Verified document number."
          },
          "verifiedDocument1Issuer": {
            "type": "string",
            "description": "Verified document issuer."
          },
          "customData": {
            "type": "array",
            "description": "A list of custom data fields. It can accept up to 10 entries.",
            "items": {
              "type": "string",
              "description": "A list of custom data fields. It can accept up to 10 entries."
            }
          },
          "firstRateAmount": {
            "type": "integer",
            "description": "Amount of the first rate paid by the customer.",
            "format": "int32"
          }
        }
      },
      "DeltaVistaScreenRequest": {
        "type": "object",
        "description": "DVI has no specific request parameters but we need an empty object here to handle it as a DVI request."
      },
      "MfaAuthorizeScreenRequest": {
        "type": "object",
        "properties": {
          "paycard": {
            "type": "string",
            "description": "The paycard number if available."
          }
        },
        "description": "MFA has no specific request parameters but we need an empty object here to handle it as a MFA request."
      },
      "ScreenRequest": {
        "required": [
          "amount",
          "currency",
          "refno"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "refno": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerRequest"
          },
          "billing": {
            "$ref": "#/components/schemas/BillingAddress"
          },
          "shipping": {
            "$ref": "#/components/schemas/ShippingAddress"
          },
          "INT": {
            "$ref": "#/components/schemas/ByjunoScreenRequest"
          },
          "MFA": {
            "$ref": "#/components/schemas/MfaAuthorizeScreenRequest"
          },
          "DVI": {
            "$ref": "#/components/schemas/DeltaVistaScreenRequest"
          }
        }
      },
      "SecureFieldsInitResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The `transactionId` to be used when calling SecureFields.init(). If no further action happens with the `transactionId` after initialization, it will be invalidated after 30 minutes."
          }
        }
      },
      "ApplePaySettings": {
        "required": [
          "country",
          "currency"
        ],
        "type": "object",
        "properties": {
          "merchantName": {
            "type": "string",
            "description": "The canonical name for your store, suitable for display."
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "country": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "2 letter <a href='https://en.wikipedia.org/wiki/ISO_3166' target='_blank'>ISO 3166-1</a> alpha-2 character code. For example 'CH' or 'GR'"
          },
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          }
        }
      },
      "GooglePaySettings": {
        "required": [
          "currency"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "country": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "2 letter <a href='https://en.wikipedia.org/wiki/ISO_3166' target='_blank'>ISO 3166-1</a> alpha-2 character code. For example 'CH' or 'GR'"
          },
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          }
        }
      },
      "TokenizeSecureFieldsInitRequest": {
        "type": "object",
        "properties": {
          "cardholder": {
            "$ref": "#/components/schemas/CardholderData"
          },
          "usage": {
            "type": "string",
            "enum": [
              "SIMPLE",
              "REGISTRATION",
              "GUEST_CHECKOUT",
              "CHECKOUT_AND_REGISTRATION"
            ]
          },
          "applePay": {
            "$ref": "#/components/schemas/ApplePaySettings"
          },
          "googlePay": {
            "$ref": "#/components/schemas/GooglePaySettings"
          }
        }
      },
      "DefaultSecureFieldsInitRequest": {
        "required": [
          "currency",
          "returnUrl"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "returnUrl": {
            "type": "string",
            "description": "The URL where the browser will be redirected after the 3D authentication process."
          },
          "mcp": {
            "$ref": "#/components/schemas/InitMcpRequest"
          },
          "3D": {
            "$ref": "#/components/schemas/SecureFieldsThreeDSecure"
          }
        }
      },
      "SecureFieldsThreeDSecure": {
        "type": "object",
        "properties": {
          "threeDSRequestor": {
            "$ref": "#/components/schemas/ThreeDSRequestor"
          },
          "threeDSRequestorURL": {
            "type": "string",
            "description": "Fully qualified URL of 3DS Requestor website or customer care site. This field is optional\nand it is recommended to be configured in the configuration.\n",
            "format": "url"
          },
          "cardholderAccount": {
            "$ref": "#/components/schemas/CardholderAccount"
          },
          "cardholder": {
            "$ref": "#/components/schemas/Cardholder"
          },
          "purchase": {
            "$ref": "#/components/schemas/Purchase"
          },
          "merchant": {
            "$ref": "#/components/schemas/MerchantData"
          },
          "broadInfo": {
            "type": "string"
          },
          "browserInformation": {
            "$ref": "#/components/schemas/Browser"
          },
          "threeRIInd": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05",
              "06",
              "07",
              "08",
              "09",
              "10",
              "11",
              "12"
            ]
          }
        },
        "description": "Refer to the official <a href='https://www.emvco.com/specifications/emv-3-d-secure-protocol-and-core-functions-specification-6'>EMVCo. specifications</a> for parameter requirements."
      },
      "SecureFieldsUpdateRequest": {
        "required": [
          "currency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The newly to be used amount in the currency’s smallest unit. For example use 1000 for CHF 10.00.",
            "format": "int64"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          }
        }
      },
      "MarketPlaceSettle": {
        "required": [
          "splits"
        ],
        "type": "object",
        "properties": {
          "splits": {
            "type": "array",
            "description": "The marketplace splits",
            "items": {
              "$ref": "#/components/schemas/MarketPlaceSplit"
            }
          }
        }
      },
      "MultiplePartialCapture": {
        "required": [
          "sequenceNumber",
          "totalNumber"
        ],
        "type": "object",
        "properties": {
          "sequenceNumber": {
            "type": "integer",
            "description": "The sequence number of the partial request. It needs to be incremented with every partial request and must not be bigger than the total number.",
            "format": "int32"
          },
          "totalNumber": {
            "type": "integer",
            "description": "The total number of expected partial settlements. Needs to be set on every partial settlement request.",
            "format": "int32"
          }
        },
        "description": "Can be used to do the settlement in partial steps."
      },
      "SettleMcpRequest": {
        "required": [
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The targeted currency"
          },
          "amount": {
            "type": "integer",
            "description": "The amount in your targeted currency",
            "format": "int64"
          }
        }
      },
      "SettleRequest": {
        "required": [
          "amount",
          "currency",
          "refno"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "refno": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The merchant's reference number. Most payment methods require you to have a unique reference for a transaction. In case you must change the reference number in settlement, ensure first it is supported by the dedicated payment method."
          },
          "refno2": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Optional customer's reference number. Supported by some payment methods or acquirers."
          },
          "airlineData": {
            "$ref": "#/components/schemas/AirlineDataRequest"
          },
          "marketplace": {
            "$ref": "#/components/schemas/MarketPlaceSettle"
          },
          "mcp": {
            "$ref": "#/components/schemas/SettleMcpRequest"
          },
          "partialCapture": {
            "$ref": "#/components/schemas/MultiplePartialCapture"
          },
          "extensions": {
            "$ref": "#/components/schemas/Extension"
          }
        }
      },
      "Action": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "The action performed.",
            "enum": [
              "init",
              "authenticate",
              "authorize",
              "settle",
              "credit",
              "cancel",
              "change_details"
            ]
          },
          "autoSettle": {
            "type": "boolean",
            "description": "Indicates if auto settlement was used. Only applicable if action was `authorize`"
          },
          "requestId": {
            "type": "string",
            "description": "Planet wide transaction Id per action.",
            "format": "uuid"
          },
          "amount": {
            "type": "integer",
            "description": "The amount used.",
            "format": "int64"
          },
          "source": {
            "type": "string",
            "description": "From where the action originated.",
            "enum": [
              "admin",
              "amadeus",
              "ajax",
              "android",
              "api",
              "inline",
              "ios",
              "lightbox",
              "link",
              "redirect",
              "secure_fields",
              "system",
              "web",
              "web_hidden",
              "unknown"
            ]
          },
          "date": {
            "type": "string",
            "description": "Date when the action was performed.",
            "format": "date-time"
          },
          "success": {
            "type": "boolean",
            "description": "Whether the action was successful or not."
          },
          "marketplace": {
            "$ref": "#/components/schemas/MarketPlace"
          },
          "ip": {
            "type": "string",
            "description": "The IP address from where the action originated from."
          }
        }
      },
      "AuthorizeDetail": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The authorization amount.",
            "format": "int64"
          },
          "acquirerAuthorizationCode": {
            "type": "string",
            "description": "The authorization code returned by the acquirer or payment method provider."
          }
        }
      },
      "Avs": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "The result of the address verification. It is the exact same resultas returned from the acquirer. Be aware that different acquirers can returnresult codes."
          }
        },
        "description": "Address Verification Service Response properties."
      },
      "ByjunoDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "If INT was used for a transaction the object holds all Byjuno relevant properties."
      },
      "CDMResponse": {
        "type": "object",
        "description": "The response of the cybersource decision manager."
      },
      "CancelDetail": {
        "type": "object",
        "properties": {
          "reversal": {
            "type": "boolean",
            "description": "Whether the transaction was reversed on acquirer side."
          }
        }
      },
      "CreditDetail": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The credit amount.",
            "format": "int64"
          }
        }
      },
      "Creditor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "xml": {
              "name": "Name"
            }
          },
          "addressLine1": {
            "type": "string",
            "xml": {
              "name": "AddressLine1"
            }
          },
          "addressLine2": {
            "type": "string",
            "xml": {
              "name": "AddressLine2"
            }
          },
          "country": {
            "type": "string",
            "xml": {
              "name": "Country"
            }
          }
        }
      },
      "CreditorInformation": {
        "type": "object",
        "properties": {
          "iban": {
            "type": "string",
            "xml": {
              "name": "IBAN"
            }
          },
          "creditor": {
            "$ref": "#/components/schemas/Creditor"
          }
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the customer."
          },
          "name": {
            "type": "string",
            "description": "The full name of the customer."
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the customer."
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the customer."
          },
          "street": {
            "type": "string",
            "description": "The street of the customer."
          },
          "city": {
            "type": "string",
            "description": "The city of the customer."
          },
          "country": {
            "type": "string",
            "description": "2 letter ISO 3166-1 alpha-2 country code"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip code of the customer."
          }
        },
        "description": "Customer details. Returned only if collected by the payment page. Setup dependent."
      },
      "Dcc": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The DCC currency"
          },
          "amount": {
            "type": "integer",
            "description": "The DCC amount",
            "format": "int64"
          },
          "rate": {
            "type": "number",
            "description": "The DCC rate",
            "format": "double"
          },
          "markup": {
            "type": "number",
            "description": "The DCC markup",
            "format": "double"
          }
        },
        "description": "DCC (Dynamic Currency Conversion) data if available."
      },
      "Detail": {
        "type": "object",
        "properties": {
          "init": {
            "$ref": "#/components/schemas/InitDetail"
          },
          "authorize": {
            "$ref": "#/components/schemas/AuthorizeDetail"
          },
          "settle": {
            "$ref": "#/components/schemas/SettleDetail"
          },
          "credit": {
            "$ref": "#/components/schemas/CreditDetail"
          },
          "cancel": {
            "$ref": "#/components/schemas/CancelDetail"
          },
          "fail": {
            "$ref": "#/components/schemas/FailDetail"
          }
        },
        "description": "Details about the various action steps of the transaction."
      },
      "EMVCo3DAuthenticationDataStatusResponse": {
        "type": "object",
        "properties": {
          "eci": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The Electronic Commerce Indicator",
            "enum": [
              "01",
              "02",
              "05",
              "06",
              "07"
            ]
          },
          "xid": {
            "type": "string",
            "description": "The transaction ID returned by the directory server"
          },
          "threeDSTransactionId": {
            "type": "string",
            "description": "The transaction ID returned by the 3D Secure Provider"
          },
          "cavv": {
            "type": "string",
            "description": "The Cardholder Authentication Verification Value"
          },
          "threeDSVersion": {
            "type": "string",
            "description": "The 3D version"
          },
          "cavvAlgorithm": {
            "type": "string",
            "description": "The 3D algorithm"
          },
          "directoryResponse": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Transaction status after `ARes`\n\n|Value|3Dv1|3Dv2|\n|:---|:---|:---|\n|Y| enrolled| authenticated|\n|N| not enrolled| authentication failed|\n|U| not available| not available|\n|C| |challenge needed|\n|R| |rejected|\n|A| |authentication attempt|\n\n",
            "enum": [
              "Y",
              "N",
              "U",
              "C",
              "R",
              "A"
            ]
          },
          "authenticationResponse": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Transaction status after `RReq` (Challenge flow)\n\n|Value|3Dv1|3Dv2|\n|:---|:---|:---|\n|Y| authenticated| authenticated|\n|N| authentication failed| authentication failed|\n|U| not available| not available|\n|A| authentication attempt| authentication attempt|\n|C| process incomplete| process incomplete|\n|D| not enrolled| |\n\n",
            "enum": [
              "Y",
              "N",
              "U",
              "A",
              "C",
              "D"
            ]
          },
          "transStatusReason": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "Transaction status reason\n\n|Value|Description|\n|:---|:---|\n|01| Card authentication failed|\n|02| Unknown Device|\n|03| Unsupported Device|\n|04| Exceeds authentication frequency limit|\n|05| Expired card|\n|06| Invalid card number|\n|07| Invalid transaction|\n|08| No Card record|\n|09| Security failure|\n|10| Stolen card|\n|11| Suspected fraud|\n|12| Transaction not permitted to cardholder|\n|13| Cardholder not enrolled in service|\n|14| Transaction timed out at the ACS|\n|15| Low confidence|\n|16| Medium confidence|\n|17| High confidence|\n|18| Very High confidence|\n|19| Exceeds ACS maximum challenges|\n|20| Non-Payment transaction not supported|\n|21| 3RI transaction not supported|\n|22| ACS technical issue|\n|23| Decoupled Authentication required by ACS but not requested by 3DS Requestor|\n|24| 3DS Requestor Decoupled Max Expiry Time exceeded|\n|25| Decoupled Authentication was provided insufficient time to authenticate cardholder. ACS will not make attempt|\n|26| Authentication attempted but not performed by the cardholder|\n|27–79| Reserved for EMVCo future use (values invalid until defined by EMVCo)|\n|80–99 | Reserved for DS use|\n"
          },
          "cardHolderInfo": {
            "type": "string",
            "description": "Text provided by the ACS/Issuer to Cardholder during a transaction that was not authenticated by the ACS. The Issuer can optionally provide information to Cardholder. For example, \"Additional authentication is needed for this transaction, please contact (Issuer Name) at xxx-xxx-xxxx.\""
          }
        },
        "description": "3D authentication data, if available"
      },
      "ElvDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "mandateId": {
            "type": "string",
            "description": "The mandate it which was passed in the init request if available."
          },
          "iban": {
            "type": "string",
            "description": "The used IBAN."
          }
        },
        "description": "If ELV was used for a transaction the object holds all ELV relevant properties."
      },
      "Ep2": {
        "type": "object",
        "properties": {
          "trmID": {
            "type": "string",
            "description": "The terminal ID"
          },
          "trxSeqCnt": {
            "type": "string",
            "description": "The transaction Sequence Count"
          },
          "aid": {
            "type": "string",
            "description": "The application Identifier"
          },
          "amtAuth": {
            "type": "string",
            "description": "The authorized amount"
          },
          "trxDate": {
            "type": "string",
            "description": "The date of the processing"
          },
          "trxTime": {
            "type": "string",
            "description": "The time of the processing"
          },
          "pan": {
            "type": "string",
            "description": "The PAN"
          },
          "appPanEnc": {
            "type": "string",
            "description": "The encrypted cardholder account number"
          },
          "issuerCode": {
            "type": "string",
            "description": "The issuer code"
          },
          "actSeqCnt": {
            "type": "integer",
            "description": "The activation sequence count",
            "format": "int32"
          },
          "trxRefNum": {
            "type": "string",
            "description": "The transaction reference number"
          },
          "trxTypeExt": {
            "type": "string",
            "description": "The transaction type extension"
          },
          "brand": {
            "type": "string",
            "description": "The brand"
          },
          "authCode": {
            "type": "string",
            "description": "The authorization code"
          },
          "staticKeyIndex": {
            "type": "string",
            "description": "The static key index"
          },
          "trxCurrC": {
            "type": "string",
            "description": "The transaction currency code"
          }
        },
        "description": "EP2 data if available."
      },
      "EsrData": {
        "type": "object",
        "properties": {
          "bankName": {
            "type": "string",
            "xml": {
              "name": "BankName"
            }
          },
          "bankAddress": {
            "type": "string",
            "xml": {
              "name": "BankAddress"
            }
          },
          "beneficiaryFirstLine": {
            "type": "string",
            "xml": {
              "name": "BeneficiaryFirstLine"
            }
          },
          "beneficiarySecondLine": {
            "type": "string",
            "xml": {
              "name": "BeneficiarySecondLine"
            }
          },
          "beneficiaryThirdLine": {
            "type": "string",
            "xml": {
              "name": "BeneficiaryThirdLine"
            }
          },
          "beneficiaryFourthLine": {
            "type": "string",
            "xml": {
              "name": "BeneficiaryFourthLine"
            }
          },
          "bankAccount": {
            "type": "string",
            "xml": {
              "name": "BankAccount"
            }
          },
          "payerFirstLine": {
            "type": "string",
            "xml": {
              "name": "PayerFirstLine"
            }
          },
          "payerSecondLine": {
            "type": "string",
            "xml": {
              "name": "PayerSecondLine"
            }
          },
          "payerThirdLine": {
            "type": "string",
            "xml": {
              "name": "PayerThirdLine"
            }
          },
          "payerFourthLine": {
            "type": "string",
            "xml": {
              "name": "PayerFourthLine"
            }
          },
          "referenceLine1": {
            "type": "string",
            "xml": {
              "name": "ReferenceLine1"
            }
          },
          "referenceLine2": {
            "type": "string",
            "xml": {
              "name": "ReferenceLine2"
            }
          }
        },
        "description": "Bank account details returned if `invoiceOnDelivery` was set in the init request."
      },
      "FailDetail": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The failure reason if an error occurred.",
            "enum": [
              "card_invalid",
              "declined",
              "soft_declined",
              "incomplete",
              "timeout",
              "invalid_setup",
              "secure_authentication",
              "error_on_start",
              "referral",
              "error"
            ]
          },
          "message": {
            "type": "string",
            "description": "A detailed message describing the occurred error."
          }
        }
      },
      "InitDetail": {
        "type": "object",
        "properties": {
          "expires": {
            "type": "string",
            "description": "Tells when the initialized transaction will expire if not continued - 30 minutes after initialization.",
            "format": "date-time"
          }
        }
      },
      "KlarnaDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "subtype": {
            "type": "string",
            "description": "The Klarna payment subtype. For example 'invoice' or 'direct_bank_transfer' etc."
          }
        },
        "description": "If KLN was used for a transaction the object holds all Klarna relevant properties."
      },
      "MDPDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "If MDP was used for a transaction the object holds all MDP relevant properties."
      },
      "MFXDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "esr": {
            "$ref": "#/components/schemas/EsrData"
          },
          "qrData": {
            "$ref": "#/components/schemas/QrData"
          }
        },
        "description": "If MFX was used for a transaction the object holds all MFX relevant properties."
      },
      "MPGDetail": {
        "type": "object",
        "properties": {
          "paycardNumber": {
            "type": "string",
            "description": "the paycardNumber if available"
          },
          "qrData": {
            "$ref": "#/components/schemas/QrData"
          }
        },
        "description": "If MPG was used for a transaction the object holds all MPG relevant properties."
      },
      "MPXDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "paycardNumber": {
            "type": "string",
            "description": "the paycardNumber if available"
          },
          "esr": {
            "$ref": "#/components/schemas/EsrData"
          },
          "qrData": {
            "$ref": "#/components/schemas/QrData"
          }
        },
        "description": "If MPX was used for a transaction the object holds all MPX relevant properties."
      },
      "MarketPlace": {
        "required": [
          "splits"
        ],
        "type": "object",
        "properties": {
          "splits": {
            "type": "array",
            "description": "The marketplace splits",
            "items": {
              "$ref": "#/components/schemas/MarketPlaceSplit"
            }
          }
        },
        "description": "If you are a marketplace merchant, use this object to send one or multiplesplits per transaction."
      },
      "MultiCurrencyProcessing": {
        "required": [
          "conversionRate",
          "localTransactionTime",
          "provider",
          "reasonIndicator",
          "retrievalReferenceNumber",
          "transactionDate",
          "userId"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The targeted currency"
          },
          "conversionRate": {
            "type": "number",
            "description": "Conversion rate received from the currency rates endpoint",
            "format": "double"
          },
          "amount": {
            "type": "integer",
            "description": "The amount in your targeted currency",
            "format": "int64"
          },
          "transactionDate": {
            "type": "string",
            "description": "Transaction datetime received from the currency rates endpoint",
            "format": "date-time"
          },
          "localTransactionTime": {
            "type": "string",
            "description": "LocalTransactionTime received from the currency rates endpoint"
          },
          "retrievalReferenceNumber": {
            "type": "string",
            "description": "RetrievalReferenceNumber received from the currency rates endpoint"
          },
          "userId": {
            "type": "string"
          },
          "provider": {
            "type": "string",
            "description": "The provider for multi currency processing"
          },
          "reasonIndicator": {
            "type": "string",
            "description": "If received from acquirer the reason indicator can be set"
          }
        },
        "description": "Multi currency processing data if sent during init or authorization"
      },
      "PayPalDetail": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "The PayPal orderId, if the transaction was a PayPal order."
          },
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "payerId": {
            "type": "string",
            "description": "The PayPal payerId"
          }
        },
        "description": "If PayPal was used for a transaction the object holds all PayPal relevant properties."
      },
      "PaymentReference": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "xml": {
              "name": "Reference"
            }
          }
        }
      },
      "PostfinanceDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "masked": {
            "type": "string",
            "description": "Masked card number. Can be used to display on a users profile page. For example: `****2345`"
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the Postfinance card"
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the Postfinance card"
          }
        },
        "description": "If PFC was used for a transaction the object holds all Postfinance relevant properties."
      },
      "QrData": {
        "type": "object",
        "properties": {
          "creditorInformation": {
            "$ref": "#/components/schemas/CreditorInformation"
          },
          "ultimateDebtor": {
            "$ref": "#/components/schemas/UltimateDebtor"
          },
          "paymentReference": {
            "$ref": "#/components/schemas/PaymentReference"
          }
        },
        "description": "QR code data if available"
      },
      "RekaDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "masked": {
            "type": "string",
            "description": "Masked REKA number. Can be used to display on a users profile page."
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the REKA card"
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the REKA card"
          },
          "subtype": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The REKA payment subtype. REK for REKA Pay, REL for REKA Lunch, RER for REKA Rail.",
            "enum": [
              "REK",
              "REL",
              "RER"
            ]
          }
        },
        "description": "If Reka was used for a transaction the object holds all Reka relevant properties."
      },
      "SBBHalbtaxPlusDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The SBBHalbtaxPlus alias."
          }
        },
        "description": "If PLU was used for a transaction the object holds all SBBHalbtaxPlus relevant properties."
      },
      "SettleDetail": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The settled amount.",
            "format": "int64"
          }
        }
      },
      "StatusCardDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "fingerprint": {
            "maxLength": 24,
            "minLength": 24,
            "pattern": "F-[A-Za-z0-9_-]{22}",
            "type": "string",
            "description": "An unique identifier of the card number. Useful to identify multiple customers' or the same customer's transactions where the same card was used.",
            "example": "F-coGuJQ55tUk8CnKGI9PX1T"
          },
          "masked": {
            "type": "string",
            "description": "Masked credit card number. Can be used to display on a users profile page. For example: `424242xxxxxx4242`"
          },
          "aliasCVV": {
            "type": "string",
            "description": "Alias of the CVV. Will be deleted immediately after authorization."
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the credit card alias."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the credit card alias"
          },
          "info": {
            "$ref": "#/components/schemas/CardInfo"
          },
          "walletIndicator": {
            "type": "string",
            "enum": [
              "APL",
              "PAY",
              "SAM",
              "VPS",
              "MBP"
            ]
          },
          "networkToken": {
            "$ref": "#/components/schemas/TokenInfo"
          },
          "altId": {
            "$ref": "#/components/schemas/TokenInfo"
          },
          "3D": {
            "$ref": "#/components/schemas/EMVCo3DAuthenticationDataStatusResponse"
          }
        },
        "description": "If a credit card payment method was used for a transaction the `card` object holds all relevant properties for the used card."
      },
      "StatusResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The transactionId received after an authorization."
          },
          "merchantId": {
            "type": "string",
            "description": "The merchant id."
          },
          "type": {
            "type": "string",
            "enum": [
              "payment",
              "credit",
              "card_check"
            ]
          },
          "status": {
            "type": "string",
            "description": "The transaction status\n\n|Status|Description|\n|:---|:---|\n|initialized| When a transaction was initialized. A transaction is initialized after a successful init request. This status is only set for customer-initiated flows before consumers start their payment via our payment forms.|\n|authenticated| When a transaction was authenticated. This status is only set if you defer the authorization from the authentication.|\n|authorized| When a transaction was authorized. This status is only set if you defer the settlement from the authorization.|\n|settled| When a transaction was settled partially or fully.|\n|canceled| When a transaction was canceled by the user or automatically by the system after a time out occurred on our payment forms.\n|transmitted| When a transaction was transmitted to the acquirer for processing. This is automatically set by our system.|\n|failed| When a transaction failed.|\n",
            "enum": [
              "initialized",
              "challenge_required",
              "challenge_ongoing",
              "authenticated",
              "authorized",
              "settled",
              "canceled",
              "transmitted",
              "failed"
            ]
          },
          "currency": {
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "refno": {
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          },
          "refno2": {
            "type": "string",
            "description": "Optional customer's reference number. Supported by some payment methods or acquirers."
          },
          "paymentMethod": {
            "type": "string",
            "enum": [
              "ACC",
              "ALP",
              "APL",
              "AMX",
              "AZP",
              "BAC",
              "BON",
              "CBL",
              "CFY",
              "CSY",
              "CUP",
              "DEA",
              "DIN",
              "DII",
              "DIB",
              "DIS",
              "DNK",
              "ECA",
              "ELV",
              "EPS",
              "ESY",
              "GFT",
              "GPA",
              "HPC",
              "INT",
              "JCB",
              "JEL",
              "KLN",
              "MAU",
              "MDP",
              "MFA",
              "MFX",
              "MPA",
              "MFG",
              "MPG",
              "MPX",
              "MYO",
              "PAP",
              "PAY",
              "PEF",
              "PFC",
              "PSC",
              "REK",
              "SAM",
              "SWB",
              "SCX",
              "SWP",
              "TWI",
              "UAP",
              "VIS",
              "WEC",
              "SWH",
              "VPS",
              "MBP",
              "CUV",
              "GEP",
              "PLU",
              "DVI"
            ]
          },
          "detail": {
            "$ref": "#/components/schemas/Detail"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "cdm": {
            "$ref": "#/components/schemas/CDMResponse"
          },
          "accertify": {
            "$ref": "#/components/schemas/Accertify"
          },
          "language": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The language (language code) in which the payment was presented to the cardholder. The <a href='https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes' target='_blank'>ISO-639-1</a> two letter language codes listed above are supported",
            "enum": [
              "en",
              "de",
              "fr",
              "it",
              "es",
              "el",
              "fi",
              "hu",
              "ko",
              "nl",
              "no",
              "da",
              "pl",
              "pt",
              "ru",
              "ja",
              "sk",
              "sl",
              "sv",
              "tr",
              "zh"
            ]
          },
          "card": {
            "$ref": "#/components/schemas/StatusCardDetail"
          },
          "TWI": {
            "$ref": "#/components/schemas/TwintDetail"
          },
          "PAP": {
            "$ref": "#/components/schemas/PayPalDetail"
          },
          "REK": {
            "$ref": "#/components/schemas/RekaDetail"
          },
          "ELV": {
            "$ref": "#/components/schemas/ElvDetail"
          },
          "KLN": {
            "$ref": "#/components/schemas/KlarnaDetail"
          },
          "INT": {
            "$ref": "#/components/schemas/ByjunoDetail"
          },
          "SWP": {
            "$ref": "#/components/schemas/SwissPassDetail"
          },
          "MPG": {
            "$ref": "#/components/schemas/MPGDetail"
          },
          "MFX": {
            "$ref": "#/components/schemas/MFXDetail"
          },
          "MPX": {
            "$ref": "#/components/schemas/MPXDetail"
          },
          "MDP": {
            "$ref": "#/components/schemas/MDPDetail"
          },
          "ESY": {
            "$ref": "#/components/schemas/SwisscomPayDetail"
          },
          "PFC": {
            "$ref": "#/components/schemas/PostfinanceDetail"
          },
          "PLU": {
            "$ref": "#/components/schemas/SBBHalbtaxPlusDetail"
          },
          "WEC": {
            "$ref": "#/components/schemas/WeChatDetail"
          },
          "SCX": {
            "$ref": "#/components/schemas/SuperCard"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Action"
            }
          },
          "ep2": {
            "$ref": "#/components/schemas/Ep2"
          },
          "dcc": {
            "$ref": "#/components/schemas/Dcc"
          },
          "multiCurrencyProcessing": {
            "$ref": "#/components/schemas/MultiCurrencyProcessing"
          },
          "avs": {
            "$ref": "#/components/schemas/Avs"
          }
        }
      },
      "SuperCard": {
        "type": "object",
        "properties": {
          "subtype": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The SCX payment subtype. SCM for Mastercard, SCV for Visa and SCP for Visa prepaid",
            "enum": [
              "SCM",
              "SCV",
              "SCP"
            ]
          }
        },
        "description": "Supercard specific parameters."
      },
      "SwissPassDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "If SWP was used for a transaction the object holds all SwissPass relevant properties."
      },
      "SwisscomPayDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "If ESY was used for a transaction the object holds all Swisscom Pay relevant properties."
      },
      "TwintDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The Twint alias."
          },
          "fingerprint": {
            "maxLength": 24,
            "minLength": 24,
            "pattern": "F-[A-Za-z0-9_-]{22}",
            "type": "string",
            "description": "An unique identifier of the card number. Useful to identify multiple customers' or the same customer's transactions where the same card was used.",
            "example": "F-coGuJQ55tUk8CnKGI9PX1T"
          }
        },
        "description": "If Twint was used for a transaction the object holds all Twint relevant properties."
      },
      "UltimateDebtor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "xml": {
              "name": "Name"
            }
          },
          "addressLine1": {
            "type": "string",
            "xml": {
              "name": "AddressLine1"
            }
          },
          "addressLine2": {
            "type": "string",
            "xml": {
              "name": "AddressLine2"
            }
          },
          "country": {
            "type": "string",
            "xml": {
              "name": "Country"
            }
          }
        }
      },
      "WeChatDetail": {
        "type": "object",
        "properties": {
          "prepayId": {
            "type": "string"
          }
        },
        "description": "If WEC was used for a transaction the object holds all WeChat relevant properties."
      },
      "ApplePayValidateRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "Encrypted payment data."
          },
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "signature": {
            "type": "string",
            "description": "Signature of the payment and header data. The signature includes the signing certificate, its intermediate CA certificate, and information about the signing algorithm."
          },
          "version": {
            "type": "string",
            "description": "Version information about the payment token. The token uses `EC_v1` for ECC-encrypted data, and `RSA_v1` for RSA-encrypted data."
          }
        },
        "description": "Apple Pay specific parameters for the validate request."
      },
      "CardValidateRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "number": {
            "type": "string",
            "description": "Merchants that have the option to store card information on their end can use the `number` property instead of `alias`. Please note that this option is only available to merchants that fulfill the requirements by PCI DSS to store sensitive information on their side and only upon request.",
            "example": "4242424242424242"
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the credit card alias."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the credit card alias"
          },
          "3D": {
            "$ref": "#/components/schemas/EMVCo3DAuthenticationDataAuthorizeRequest"
          }
        },
        "description": "The card object to be submitted when validating with an existing credit card alias."
      },
      "EasyPayValidateRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "Swisscom Pay specific parameters"
      },
      "GooglePayValidateRequest": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "description": "Verifies that the message came from Google. It's Base64-encoded, and created with ECDSA by the intermediate signing key."
          },
          "protocolVersion": {
            "type": "string",
            "description": "Identifies the encryption or signing scheme under which the message was created. It allows the protocol to evolve over time, if needed."
          },
          "signedMessage": {
            "type": "string",
            "description": "A JSON object serialized as a string that contains the encryptedMessage, ephemeralPublicKey, and tag. It's serialized to simplify the signature verification process."
          },
          "intermediateSigningKey": {
            "$ref": "#/components/schemas/IntermediateSigningKey"
          }
        },
        "description": "Google Pay specific parameters for the validate request."
      },
      "KlarnaValidateRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "Klarna specific parameters"
      },
      "PayPalValidateRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "PayPal specific parameters for the validate request."
      },
      "PfcValidateRequest": {
        "required": [
          "alias"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "An alias (token) received from a previous transaction if `option.createAlias` was set to `true`. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "PostFinance Card specific parameters"
      },
      "ValidateRequest": {
        "required": [
          "currency",
          "refno"
        ],
        "type": "object",
        "properties": {
          "refno": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          },
          "refno2": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Optional customer's reference number. Supported by some payment methods or acquirers."
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "card": {
            "$ref": "#/components/schemas/CardValidateRequest"
          },
          "PFC": {
            "$ref": "#/components/schemas/PfcValidateRequest"
          },
          "KLN": {
            "$ref": "#/components/schemas/KlarnaValidateRequest"
          },
          "PAP": {
            "$ref": "#/components/schemas/PayPalValidateRequest"
          },
          "PAY": {
            "$ref": "#/components/schemas/GooglePayValidateRequest"
          },
          "APL": {
            "$ref": "#/components/schemas/ApplePayValidateRequest"
          },
          "ESY": {
            "$ref": "#/components/schemas/EasyPayValidateRequest"
          }
        }
      }
    },
    "securitySchemes": {
      "Basic": {
        "type": "http",
        "scheme": "basic"
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Transactions",
      "tags": [
        "/v1/transactions"
      ]
    },
    {
      "name": "Aliases",
      "tags": [
        "/v1/aliases"
      ]
    },
    {
      "name": "Reconciliations",
      "tags": [
        "/v1/reconciliations"
      ]
    },
    {
      "name": "Multicurrency",
      "tags": [
        "/v1/multicurrency"
      ]
    }
  ]
}